(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{660:function(e,t,s){"use strict";s.r(t);var a=s(21),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"fs-minipass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fs-minipass"}},[e._v("#")]),e._v(" fs-minipass")]),e._v(" "),t("p",[e._v("Filesystem streams based on "),t("a",{attrs:{href:"http://npm.im/minipass",target:"_blank",rel:"noopener noreferrer"}},[e._v("minipass"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("4 classes are exported:")]),e._v(" "),t("ul",[t("li",[e._v("ReadStream")]),e._v(" "),t("li",[e._v("ReadStreamSync")]),e._v(" "),t("li",[e._v("WriteStream")]),e._v(" "),t("li",[e._v("WriteStreamSync")])]),e._v(" "),t("p",[e._v("When using "),t("code",[e._v("ReadStreamSync")]),e._v(", all of the data is made available\nimmediately upon consuming the stream.  Nothing is buffered in memory\nwhen the stream is constructed.  If the stream is piped to a writer,\nthen it will synchronously "),t("code",[e._v("read()")]),e._v(" and emit data into the writer as\nfast as the writer can consume it.  (That is, it will respect\nbackpressure.)  If you call "),t("code",[e._v("stream.read()")]),e._v(" then it will read the\nentire file and return the contents.")]),e._v(" "),t("p",[e._v("When using "),t("code",[e._v("WriteStreamSync")]),e._v(", every write is flushed to the file\nsynchronously.  If your writes all come in a single tick, then it'll\nwrite it all out in a single tick.  It's as synchronous as you are.")]),e._v(" "),t("p",[e._v("The async versions work much like their node builtin counterparts,\nwith the exception of introducing significantly less Stream machinery\noverhead.")]),e._v(" "),t("h2",{attrs:{id:"usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" USAGE")]),e._v(" "),t("p",[e._v("It's just streams, you pipe them or read() them or write() to them.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" fsm "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'fs-minipass'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" readStream "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("fsm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ReadStream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'file.txt'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" writeStream "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("fsm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("WriteStream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'output.txt'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nwriteStream"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'some file header or whatever\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nreadStream"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("pipe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("writeStream"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("h2",{attrs:{id:"readstream-path-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#readstream-path-options"}},[e._v("#")]),e._v(" ReadStream(path, options)")]),e._v(" "),t("p",[e._v("Path string is required, but somewhat irrelevant if an open file\ndescriptor is passed in as an option.")]),e._v(" "),t("p",[e._v("Options:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("fd")]),e._v(" Pass in a numeric file descriptor, if the file is already open.")]),e._v(" "),t("li",[t("code",[e._v("readSize")]),e._v(" The size of reads to do, defaults to 16MB")]),e._v(" "),t("li",[t("code",[e._v("size")]),e._v(" The size of the file, if known.  Prevents zero-byte read()\ncall at the end.")]),e._v(" "),t("li",[t("code",[e._v("autoClose")]),e._v(" Set to "),t("code",[e._v("false")]),e._v(" to prevent the file descriptor from being\nclosed when the file is done being read.")])]),e._v(" "),t("h2",{attrs:{id:"writestream-path-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#writestream-path-options"}},[e._v("#")]),e._v(" WriteStream(path, options)")]),e._v(" "),t("p",[e._v("Path string is required, but somewhat irrelevant if an open file\ndescriptor is passed in as an option.")]),e._v(" "),t("p",[e._v("Options:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("fd")]),e._v(" Pass in a numeric file descriptor, if the file is already open.")]),e._v(" "),t("li",[t("code",[e._v("mode")]),e._v(" The mode to create the file with. Defaults to "),t("code",[e._v("0o666")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("start")]),e._v(" The position in the file to start reading.  If not\nspecified, then the file will start writing at position zero, and be\ntruncated by default.")]),e._v(" "),t("li",[t("code",[e._v("autoClose")]),e._v(" Set to "),t("code",[e._v("false")]),e._v(" to prevent the file descriptor from being\nclosed when the stream is ended.")]),e._v(" "),t("li",[t("code",[e._v("flags")]),e._v(" Flags to use when opening the file.  Irrelevant if "),t("code",[e._v("fd")]),e._v(" is\npassed in, since file won't be opened in that case.  Defaults to\n"),t("code",[e._v("'a'")]),e._v(" if a "),t("code",[e._v("pos")]),e._v(" is specified, or "),t("code",[e._v("'w'")]),e._v(" otherwise.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);
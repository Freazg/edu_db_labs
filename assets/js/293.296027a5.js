(window.webpackJsonp=window.webpackJsonp||[]).push([[293],{822:function(t,a,s){"use strict";s.r(a);var e=s(21),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"yallist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist"}},[t._v("#")]),t._v(" yallist")]),t._v(" "),a("p",[t._v("Yet Another Linked List")]),t._v(" "),a("p",[t._v("There are many doubly-linked list implementations like it, but this\none is mine.")]),t._v(" "),a("p",[t._v("For when an array would be too big, and a Map can't be iterated in\nreverse order.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://travis-ci.org/isaacs/yallist",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://travis-ci.org/isaacs/yallist.svg?branch=master",alt:"Build Status"}}),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://coveralls.io/github/isaacs/yallist",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://coveralls.io/repos/isaacs/yallist/badge.svg?service=github",alt:"Coverage Status"}}),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"basic-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-usage"}},[t._v("#")]),t._v(" basic usage")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" yallist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yallist'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" yallist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmyList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmyList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unshift")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// of course pop() and shift() are there, too")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['bar', 1, 2, 3, 'foo']")]),t._v("\nmyList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("k")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// walk the list head to tail")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmyList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEachReverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// walk the list tail to head")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myDoubledList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("k")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" k\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// now myDoubledList contains ['barbar', 2, 4, 6, 'foofoo']")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mapReverse is also a thing")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myDoubledListReverse "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapReverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("k")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" k\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['foofoo', 6, 4, 2, 'barbar']")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reduced "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" entry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" entry\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" set\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reduced"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'startfoo123bar'")]),t._v("\n")])])]),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" api")]),t._v(" "),a("p",[t._v('The whole API is considered "public".')]),t._v(" "),a("p",[t._v("Functions with the same name as an Array method work more or less the\nsame way.")]),t._v(" "),a("p",[t._v("There's reverse versions of most things because that's the point.")]),t._v(" "),a("h3",{attrs:{id:"yallist-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-2"}},[t._v("#")]),t._v(" Yallist")]),t._v(" "),a("p",[t._v("Default export, the class that holds and manages a list.")]),t._v(" "),a("p",[t._v("Call it with either a forEach-able (like an array) or a set of\narguments, to initialize the list.")]),t._v(" "),a("p",[t._v("The Array-ish methods all act like you'd expect.  No magic length,\nthough, so if you change that it won't automatically prune or add\nempty spots.")]),t._v(" "),a("h3",{attrs:{id:"yallist-create"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-create"}},[t._v("#")]),t._v(" Yallist.create(..)")]),t._v(" "),a("p",[t._v("Alias for Yallist function.  Some people like factories.")]),t._v(" "),a("h4",{attrs:{id:"yallist-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-head"}},[t._v("#")]),t._v(" yallist.head")]),t._v(" "),a("p",[t._v("The first node in the list")]),t._v(" "),a("h4",{attrs:{id:"yallist-tail"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-tail"}},[t._v("#")]),t._v(" yallist.tail")]),t._v(" "),a("p",[t._v("The last node in the list")]),t._v(" "),a("h4",{attrs:{id:"yallist-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-length"}},[t._v("#")]),t._v(" yallist.length")]),t._v(" "),a("p",[t._v("The number of nodes in the list.  (Change this at your peril.  It is\nnot magic like Array length.)")]),t._v(" "),a("h4",{attrs:{id:"yallist-toarray"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-toarray"}},[t._v("#")]),t._v(" yallist.toArray()")]),t._v(" "),a("p",[t._v("Convert the list to an array.")]),t._v(" "),a("h4",{attrs:{id:"yallist-foreach-fn-thisp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-foreach-fn-thisp"}},[t._v("#")]),t._v(" yallist.forEach(fn, [thisp])")]),t._v(" "),a("p",[t._v("Call a function on each item in the list.")]),t._v(" "),a("h4",{attrs:{id:"yallist-foreachreverse-fn-thisp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-foreachreverse-fn-thisp"}},[t._v("#")]),t._v(" yallist.forEachReverse(fn, [thisp])")]),t._v(" "),a("p",[t._v("Call a function on each item in the list, in reverse order.")]),t._v(" "),a("h4",{attrs:{id:"yallist-get-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-get-n"}},[t._v("#")]),t._v(" yallist.get(n)")]),t._v(" "),a("p",[t._v("Get the data at position "),a("code",[t._v("n")]),t._v(" in the list.  If you use this a lot,\nprobably better off just using an Array.")]),t._v(" "),a("h4",{attrs:{id:"yallist-getreverse-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-getreverse-n"}},[t._v("#")]),t._v(" yallist.getReverse(n)")]),t._v(" "),a("p",[t._v("Get the data at position "),a("code",[t._v("n")]),t._v(", counting from the tail.")]),t._v(" "),a("h4",{attrs:{id:"yallist-map-fn-thisp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-map-fn-thisp"}},[t._v("#")]),t._v(" yallist.map(fn, thisp)")]),t._v(" "),a("p",[t._v("Create a new Yallist with the result of calling the function on each\nitem.")]),t._v(" "),a("h4",{attrs:{id:"yallist-mapreverse-fn-thisp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-mapreverse-fn-thisp"}},[t._v("#")]),t._v(" yallist.mapReverse(fn, thisp)")]),t._v(" "),a("p",[t._v("Same as "),a("code",[t._v("map")]),t._v(", but in reverse.")]),t._v(" "),a("h4",{attrs:{id:"yallist-pop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-pop"}},[t._v("#")]),t._v(" yallist.pop()")]),t._v(" "),a("p",[t._v("Get the data from the list tail, and remove the tail from the list.")]),t._v(" "),a("h4",{attrs:{id:"yallist-push-item"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-push-item"}},[t._v("#")]),t._v(" yallist.push(item, ...)")]),t._v(" "),a("p",[t._v("Insert one or more items to the tail of the list.")]),t._v(" "),a("h4",{attrs:{id:"yallist-reduce-fn-initialvalue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-reduce-fn-initialvalue"}},[t._v("#")]),t._v(" yallist.reduce(fn, initialValue)")]),t._v(" "),a("p",[t._v("Like Array.reduce.")]),t._v(" "),a("h4",{attrs:{id:"yallist-reducereverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-reducereverse"}},[t._v("#")]),t._v(" yallist.reduceReverse")]),t._v(" "),a("p",[t._v("Like Array.reduce, but in reverse.")]),t._v(" "),a("h4",{attrs:{id:"yallist-reverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-reverse"}},[t._v("#")]),t._v(" yallist.reverse")]),t._v(" "),a("p",[t._v("Reverse the list in place.")]),t._v(" "),a("h4",{attrs:{id:"yallist-shift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-shift"}},[t._v("#")]),t._v(" yallist.shift()")]),t._v(" "),a("p",[t._v("Get the data from the list head, and remove the head from the list.")]),t._v(" "),a("h4",{attrs:{id:"yallist-slice-from-to"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-slice-from-to"}},[t._v("#")]),t._v(" yallist.slice([from], [to])")]),t._v(" "),a("p",[t._v("Just like Array.slice, but returns a new Yallist.")]),t._v(" "),a("h4",{attrs:{id:"yallist-slicereverse-from-to"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-slicereverse-from-to"}},[t._v("#")]),t._v(" yallist.sliceReverse([from], [to])")]),t._v(" "),a("p",[t._v("Just like yallist.slice, but the result is returned in reverse.")]),t._v(" "),a("h4",{attrs:{id:"yallist-toarray-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-toarray-2"}},[t._v("#")]),t._v(" yallist.toArray()")]),t._v(" "),a("p",[t._v("Create an array representation of the list.")]),t._v(" "),a("h4",{attrs:{id:"yallist-toarrayreverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-toarrayreverse"}},[t._v("#")]),t._v(" yallist.toArrayReverse()")]),t._v(" "),a("p",[t._v("Create a reversed array representation of the list.")]),t._v(" "),a("h4",{attrs:{id:"yallist-unshift-item"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-unshift-item"}},[t._v("#")]),t._v(" yallist.unshift(item, ...)")]),t._v(" "),a("p",[t._v("Insert one or more items to the head of the list.")]),t._v(" "),a("h4",{attrs:{id:"yallist-unshiftnode-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-unshiftnode-node"}},[t._v("#")]),t._v(" yallist.unshiftNode(node)")]),t._v(" "),a("p",[t._v("Move a Node object to the front of the list.  (That is, pull it out of\nwherever it lives, and make it the new head.)")]),t._v(" "),a("p",[t._v("If the node belongs to a different list, then that list will remove it\nfirst.")]),t._v(" "),a("h4",{attrs:{id:"yallist-pushnode-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-pushnode-node"}},[t._v("#")]),t._v(" yallist.pushNode(node)")]),t._v(" "),a("p",[t._v("Move a Node object to the end of the list.  (That is, pull it out of\nwherever it lives, and make it the new tail.)")]),t._v(" "),a("p",[t._v("If the node belongs to a list already, then that list will remove it\nfirst.")]),t._v(" "),a("h4",{attrs:{id:"yallist-removenode-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-removenode-node"}},[t._v("#")]),t._v(" yallist.removeNode(node)")]),t._v(" "),a("p",[t._v("Remove a node from the list, preserving referential integrity of head\nand tail and other nodes.")]),t._v(" "),a("p",[t._v("Will throw an error if you try to have a list remove a node that\ndoesn't belong to it.")]),t._v(" "),a("h3",{attrs:{id:"yallist-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yallist-node"}},[t._v("#")]),t._v(" Yallist.Node")]),t._v(" "),a("p",[t._v("The class that holds the data and is actually the list.")]),t._v(" "),a("p",[t._v("Call with "),a("code",[t._v("var n = new Node(value, previousNode, nextNode)")])]),t._v(" "),a("p",[t._v("Note that if you do direct operations on Nodes themselves, it's very\neasy to get into weird states where the list is broken.  Be careful 😃")]),t._v(" "),a("h4",{attrs:{id:"node-next"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-next"}},[t._v("#")]),t._v(" node.next")]),t._v(" "),a("p",[t._v("The next node in the list.")]),t._v(" "),a("h4",{attrs:{id:"node-prev"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prev"}},[t._v("#")]),t._v(" node.prev")]),t._v(" "),a("p",[t._v("The previous node in the list.")]),t._v(" "),a("h4",{attrs:{id:"node-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-value"}},[t._v("#")]),t._v(" node.value")]),t._v(" "),a("p",[t._v("The data the node contains.")]),t._v(" "),a("h4",{attrs:{id:"node-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-list"}},[t._v("#")]),t._v(" node.list")]),t._v(" "),a("p",[t._v("The list to which this node belongs.  (Null if it does not belong to\nany list.)")])])}),[],!1,null,null,null);a.default=r.exports}}]);
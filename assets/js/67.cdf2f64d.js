(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{617:function(e,t,a){"use strict";a.r(t);var s=a(21),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"body-parser"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#body-parser"}},[e._v("#")]),e._v(" body-parser")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://npmjs.org/package/body-parser",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://badgen.net/npm/v/body-parser",alt:"NPM Version"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://npmjs.org/package/body-parser",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://badgen.net/npm/dm/body-parser",alt:"NPM Downloads"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://github.com/expressjs/body-parser/actions/workflows/ci.yml",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://badgen.net/github/checks/expressjs/body-parser/master?label=ci",alt:"Build Status"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://coveralls.io/r/expressjs/body-parser?branch=master",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://badgen.net/coveralls/c/github/expressjs/body-parser/master",alt:"Test Coverage"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://ossf.github.io/scorecard-visualizer/#/projects/github.com/expressjs/body-parser",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://api.scorecard.dev/projects/github.com/expressjs/body-parser/badge",alt:"OpenSSF Scorecard Badge"}}),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Node.js body parsing middleware.")]),e._v(" "),t("p",[e._v("Parse incoming request bodies in a middleware before your handlers, available\nunder the "),t("code",[e._v("req.body")]),e._v(" property.")]),e._v(" "),t("p",[t("strong",[e._v("Note")]),e._v(" As "),t("code",[e._v("req.body")]),e._v("'s shape is based on user-controlled input, all\nproperties and values in this object are untrusted and should be validated\nbefore trusting. For example, "),t("code",[e._v("req.body.foo.toString()")]),e._v(" may fail in multiple\nways, for example the "),t("code",[e._v("foo")]),e._v(" property may not be there or may not be a string,\nand "),t("code",[e._v("toString")]),e._v(" may not be a function and instead a string or other user input.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Learn about the anatomy of an HTTP transaction in Node.js"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[t("em",[e._v("This does not handle multipart bodies")]),e._v(", due to their complex and typically\nlarge nature. For multipart bodies, you may be interested in the following\nmodules:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.npmjs.org/package/busboy#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("busboy"),t("OutboundLink")],1),e._v(" and\n"),t("a",{attrs:{href:"https://www.npmjs.org/package/connect-busboy#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("connect-busboy"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.npmjs.org/package/multiparty#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("multiparty"),t("OutboundLink")],1),e._v(" and\n"),t("a",{attrs:{href:"https://www.npmjs.org/package/connect-multiparty#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("connect-multiparty"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.npmjs.org/package/formidable#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("formidable"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.npmjs.org/package/multer#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("multer"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("This module provides the following parsers:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#bodyparserjsonoptions"}},[e._v("JSON body parser")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#bodyparserrawoptions"}},[e._v("Raw body parser")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#bodyparsertextoptions"}},[e._v("Text body parser")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#bodyparserurlencodedoptions"}},[e._v("URL-encoded form body parser")])])]),e._v(" "),t("p",[e._v("Other body parsers you might be interested in:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.npmjs.org/package/body#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("body"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.npmjs.org/package/co-body#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("co-body"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"installation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" body-parser\n")])])]),t("h2",{attrs:{id:"api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" bodyParser "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'body-parser'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("The "),t("code",[e._v("bodyParser")]),e._v(" object exposes various factories to create middlewares. All\nmiddlewares will populate the "),t("code",[e._v("req.body")]),e._v(" property with the parsed body when\nthe "),t("code",[e._v("Content-Type")]),e._v(" request header matches the "),t("code",[e._v("type")]),e._v(" option, or an empty\nobject ("),t("code",[e._v("{}")]),e._v(") if there was no body to parse, the "),t("code",[e._v("Content-Type")]),e._v(" was not matched,\nor an error occurred.")]),e._v(" "),t("p",[e._v("The various errors returned by this module are described in the\n"),t("a",{attrs:{href:"#errors"}},[e._v("errors section")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"bodyparser-json-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bodyparser-json-options"}},[e._v("#")]),e._v(" bodyParser.json([options])")]),e._v(" "),t("p",[e._v("Returns middleware that only parses "),t("code",[e._v("json")]),e._v(" and only looks at requests where\nthe "),t("code",[e._v("Content-Type")]),e._v(" header matches the "),t("code",[e._v("type")]),e._v(" option. This parser accepts any\nUnicode encoding of the body and supports automatic inflation of "),t("code",[e._v("gzip")]),e._v(" and\n"),t("code",[e._v("deflate")]),e._v(" encodings.")]),e._v(" "),t("p",[e._v("A new "),t("code",[e._v("body")]),e._v(" object containing the parsed data is populated on the "),t("code",[e._v("request")]),e._v("\nobject after the middleware (i.e. "),t("code",[e._v("req.body")]),e._v(").")]),e._v(" "),t("h4",{attrs:{id:"options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" Options")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("json")]),e._v(" function takes an optional "),t("code",[e._v("options")]),e._v(" object that may contain any of\nthe following keys:")]),e._v(" "),t("h5",{attrs:{id:"inflate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inflate"}},[e._v("#")]),e._v(" inflate")]),e._v(" "),t("p",[e._v("When set to "),t("code",[e._v("true")]),e._v(", then deflated (compressed) bodies will be inflated; when\n"),t("code",[e._v("false")]),e._v(", deflated bodies are rejected. Defaults to "),t("code",[e._v("true")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"limit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#limit"}},[e._v("#")]),e._v(" limit")]),e._v(" "),t("p",[e._v("Controls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n"),t("a",{attrs:{href:"https://www.npmjs.com/package/bytes",target:"_blank",rel:"noopener noreferrer"}},[e._v("bytes"),t("OutboundLink")],1),e._v(" library for parsing. Defaults\nto "),t("code",[e._v("'100kb'")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"reviver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reviver"}},[e._v("#")]),e._v(" reviver")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("reviver")]),e._v(" option is passed directly to "),t("code",[e._v("JSON.parse")]),e._v(" as the second\nargument. You can find more information on this argument\n"),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter",target:"_blank",rel:"noopener noreferrer"}},[e._v("in the MDN documentation about JSON.parse"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"strict"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#strict"}},[e._v("#")]),e._v(" strict")]),e._v(" "),t("p",[e._v("When set to "),t("code",[e._v("true")]),e._v(", will only accept arrays and objects; when "),t("code",[e._v("false")]),e._v(" will\naccept anything "),t("code",[e._v("JSON.parse")]),e._v(" accepts. Defaults to "),t("code",[e._v("true")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[e._v("#")]),e._v(" type")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("type")]),e._v(" option is used to determine what media type the middleware will\nparse. This option can be a string, array of strings, or a function. If not a\nfunction, "),t("code",[e._v("type")]),e._v(" option is passed directly to the\n"),t("a",{attrs:{href:"https://www.npmjs.org/package/type-is#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-is"),t("OutboundLink")],1),e._v(" library and this can\nbe an extension name (like "),t("code",[e._v("json")]),e._v("), a mime type (like "),t("code",[e._v("application/json")]),e._v("), or\na mime type with a wildcard (like "),t("code",[e._v("*/*")]),e._v(" or "),t("code",[e._v("*/json")]),e._v("). If a function, the "),t("code",[e._v("type")]),e._v("\noption is called as "),t("code",[e._v("fn(req)")]),e._v(" and the request is parsed if it returns a truthy\nvalue. Defaults to "),t("code",[e._v("application/json")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"verify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verify"}},[e._v("#")]),e._v(" verify")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("verify")]),e._v(" option, if supplied, is called as "),t("code",[e._v("verify(req, res, buf, encoding)")]),e._v(",\nwhere "),t("code",[e._v("buf")]),e._v(" is a "),t("code",[e._v("Buffer")]),e._v(" of the raw request body and "),t("code",[e._v("encoding")]),e._v(" is the\nencoding of the request. The parsing can be aborted by throwing an error.")]),e._v(" "),t("h3",{attrs:{id:"bodyparser-raw-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bodyparser-raw-options"}},[e._v("#")]),e._v(" bodyParser.raw([options])")]),e._v(" "),t("p",[e._v("Returns middleware that parses all bodies as a "),t("code",[e._v("Buffer")]),e._v(" and only looks at\nrequests where the "),t("code",[e._v("Content-Type")]),e._v(" header matches the "),t("code",[e._v("type")]),e._v(" option. This\nparser supports automatic inflation of "),t("code",[e._v("gzip")]),e._v(" and "),t("code",[e._v("deflate")]),e._v(" encodings.")]),e._v(" "),t("p",[e._v("A new "),t("code",[e._v("body")]),e._v(" object containing the parsed data is populated on the "),t("code",[e._v("request")]),e._v("\nobject after the middleware (i.e. "),t("code",[e._v("req.body")]),e._v("). This will be a "),t("code",[e._v("Buffer")]),e._v(" object\nof the body.")]),e._v(" "),t("h4",{attrs:{id:"options-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-2"}},[e._v("#")]),e._v(" Options")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("raw")]),e._v(" function takes an optional "),t("code",[e._v("options")]),e._v(" object that may contain any of\nthe following keys:")]),e._v(" "),t("h5",{attrs:{id:"inflate-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inflate-2"}},[e._v("#")]),e._v(" inflate")]),e._v(" "),t("p",[e._v("When set to "),t("code",[e._v("true")]),e._v(", then deflated (compressed) bodies will be inflated; when\n"),t("code",[e._v("false")]),e._v(", deflated bodies are rejected. Defaults to "),t("code",[e._v("true")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"limit-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#limit-2"}},[e._v("#")]),e._v(" limit")]),e._v(" "),t("p",[e._v("Controls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n"),t("a",{attrs:{href:"https://www.npmjs.com/package/bytes",target:"_blank",rel:"noopener noreferrer"}},[e._v("bytes"),t("OutboundLink")],1),e._v(" library for parsing. Defaults\nto "),t("code",[e._v("'100kb'")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"type-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-2"}},[e._v("#")]),e._v(" type")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("type")]),e._v(" option is used to determine what media type the middleware will\nparse. This option can be a string, array of strings, or a function.\nIf not a function, "),t("code",[e._v("type")]),e._v(" option is passed directly to the\n"),t("a",{attrs:{href:"https://www.npmjs.org/package/type-is#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-is"),t("OutboundLink")],1),e._v(" library and this\ncan be an extension name (like "),t("code",[e._v("bin")]),e._v("), a mime type (like\n"),t("code",[e._v("application/octet-stream")]),e._v("), or a mime type with a wildcard (like "),t("code",[e._v("*/*")]),e._v(" or\n"),t("code",[e._v("application/*")]),e._v("). If a function, the "),t("code",[e._v("type")]),e._v(" option is called as "),t("code",[e._v("fn(req)")]),e._v("\nand the request is parsed if it returns a truthy value. Defaults to\n"),t("code",[e._v("application/octet-stream")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"verify-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verify-2"}},[e._v("#")]),e._v(" verify")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("verify")]),e._v(" option, if supplied, is called as "),t("code",[e._v("verify(req, res, buf, encoding)")]),e._v(",\nwhere "),t("code",[e._v("buf")]),e._v(" is a "),t("code",[e._v("Buffer")]),e._v(" of the raw request body and "),t("code",[e._v("encoding")]),e._v(" is the\nencoding of the request. The parsing can be aborted by throwing an error.")]),e._v(" "),t("h3",{attrs:{id:"bodyparser-text-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bodyparser-text-options"}},[e._v("#")]),e._v(" bodyParser.text([options])")]),e._v(" "),t("p",[e._v("Returns middleware that parses all bodies as a string and only looks at\nrequests where the "),t("code",[e._v("Content-Type")]),e._v(" header matches the "),t("code",[e._v("type")]),e._v(" option. This\nparser supports automatic inflation of "),t("code",[e._v("gzip")]),e._v(" and "),t("code",[e._v("deflate")]),e._v(" encodings.")]),e._v(" "),t("p",[e._v("A new "),t("code",[e._v("body")]),e._v(" string containing the parsed data is populated on the "),t("code",[e._v("request")]),e._v("\nobject after the middleware (i.e. "),t("code",[e._v("req.body")]),e._v("). This will be a string of the\nbody.")]),e._v(" "),t("h4",{attrs:{id:"options-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-3"}},[e._v("#")]),e._v(" Options")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("text")]),e._v(" function takes an optional "),t("code",[e._v("options")]),e._v(" object that may contain any of\nthe following keys:")]),e._v(" "),t("h5",{attrs:{id:"defaultcharset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defaultcharset"}},[e._v("#")]),e._v(" defaultCharset")]),e._v(" "),t("p",[e._v("Specify the default character set for the text content if the charset is not\nspecified in the "),t("code",[e._v("Content-Type")]),e._v(" header of the request. Defaults to "),t("code",[e._v("utf-8")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"inflate-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inflate-3"}},[e._v("#")]),e._v(" inflate")]),e._v(" "),t("p",[e._v("When set to "),t("code",[e._v("true")]),e._v(", then deflated (compressed) bodies will be inflated; when\n"),t("code",[e._v("false")]),e._v(", deflated bodies are rejected. Defaults to "),t("code",[e._v("true")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"limit-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#limit-3"}},[e._v("#")]),e._v(" limit")]),e._v(" "),t("p",[e._v("Controls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n"),t("a",{attrs:{href:"https://www.npmjs.com/package/bytes",target:"_blank",rel:"noopener noreferrer"}},[e._v("bytes"),t("OutboundLink")],1),e._v(" library for parsing. Defaults\nto "),t("code",[e._v("'100kb'")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"type-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-3"}},[e._v("#")]),e._v(" type")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("type")]),e._v(" option is used to determine what media type the middleware will\nparse. This option can be a string, array of strings, or a function. If not\na function, "),t("code",[e._v("type")]),e._v(" option is passed directly to the\n"),t("a",{attrs:{href:"https://www.npmjs.org/package/type-is#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-is"),t("OutboundLink")],1),e._v(" library and this can\nbe an extension name (like "),t("code",[e._v("txt")]),e._v("), a mime type (like "),t("code",[e._v("text/plain")]),e._v("), or a mime\ntype with a wildcard (like "),t("code",[e._v("*/*")]),e._v(" or "),t("code",[e._v("text/*")]),e._v("). If a function, the "),t("code",[e._v("type")]),e._v("\noption is called as "),t("code",[e._v("fn(req)")]),e._v(" and the request is parsed if it returns a\ntruthy value. Defaults to "),t("code",[e._v("text/plain")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"verify-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verify-3"}},[e._v("#")]),e._v(" verify")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("verify")]),e._v(" option, if supplied, is called as "),t("code",[e._v("verify(req, res, buf, encoding)")]),e._v(",\nwhere "),t("code",[e._v("buf")]),e._v(" is a "),t("code",[e._v("Buffer")]),e._v(" of the raw request body and "),t("code",[e._v("encoding")]),e._v(" is the\nencoding of the request. The parsing can be aborted by throwing an error.")]),e._v(" "),t("h3",{attrs:{id:"bodyparser-urlencoded-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bodyparser-urlencoded-options"}},[e._v("#")]),e._v(" bodyParser.urlencoded([options])")]),e._v(" "),t("p",[e._v("Returns middleware that only parses "),t("code",[e._v("urlencoded")]),e._v(" bodies and only looks at\nrequests where the "),t("code",[e._v("Content-Type")]),e._v(" header matches the "),t("code",[e._v("type")]),e._v(" option. This\nparser accepts only UTF-8 encoding of the body and supports automatic\ninflation of "),t("code",[e._v("gzip")]),e._v(" and "),t("code",[e._v("deflate")]),e._v(" encodings.")]),e._v(" "),t("p",[e._v("A new "),t("code",[e._v("body")]),e._v(" object containing the parsed data is populated on the "),t("code",[e._v("request")]),e._v("\nobject after the middleware (i.e. "),t("code",[e._v("req.body")]),e._v("). This object will contain\nkey-value pairs, where the value can be a string or array (when "),t("code",[e._v("extended")]),e._v(" is\n"),t("code",[e._v("false")]),e._v("), or any type (when "),t("code",[e._v("extended")]),e._v(" is "),t("code",[e._v("true")]),e._v(").")]),e._v(" "),t("h4",{attrs:{id:"options-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-4"}},[e._v("#")]),e._v(" Options")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("urlencoded")]),e._v(" function takes an optional "),t("code",[e._v("options")]),e._v(" object that may contain\nany of the following keys:")]),e._v(" "),t("h5",{attrs:{id:"extended"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extended"}},[e._v("#")]),e._v(" extended")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("extended")]),e._v(" option allows to choose between parsing the URL-encoded data\nwith the "),t("code",[e._v("querystring")]),e._v(" library (when "),t("code",[e._v("false")]),e._v(") or the "),t("code",[e._v("qs")]),e._v(" library (when\n"),t("code",[e._v("true")]),e._v('). The "extended" syntax allows for rich objects and arrays to be\nencoded into the URL-encoded format, allowing for a JSON-like experience\nwith URL-encoded. For more information, please\n'),t("a",{attrs:{href:"https://www.npmjs.org/package/qs#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("see the qs library"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Defaults to "),t("code",[e._v("true")]),e._v(", but using the default has been deprecated. Please\nresearch into the difference between "),t("code",[e._v("qs")]),e._v(" and "),t("code",[e._v("querystring")]),e._v(" and choose the\nappropriate setting.")]),e._v(" "),t("h5",{attrs:{id:"inflate-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inflate-4"}},[e._v("#")]),e._v(" inflate")]),e._v(" "),t("p",[e._v("When set to "),t("code",[e._v("true")]),e._v(", then deflated (compressed) bodies will be inflated; when\n"),t("code",[e._v("false")]),e._v(", deflated bodies are rejected. Defaults to "),t("code",[e._v("true")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"limit-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#limit-4"}},[e._v("#")]),e._v(" limit")]),e._v(" "),t("p",[e._v("Controls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n"),t("a",{attrs:{href:"https://www.npmjs.com/package/bytes",target:"_blank",rel:"noopener noreferrer"}},[e._v("bytes"),t("OutboundLink")],1),e._v(" library for parsing. Defaults\nto "),t("code",[e._v("'100kb'")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"parameterlimit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameterlimit"}},[e._v("#")]),e._v(" parameterLimit")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("parameterLimit")]),e._v(" option controls the maximum number of parameters that\nare allowed in the URL-encoded data. If a request contains more parameters\nthan this value, a 413 will be returned to the client. Defaults to "),t("code",[e._v("1000")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"type-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-4"}},[e._v("#")]),e._v(" type")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("type")]),e._v(" option is used to determine what media type the middleware will\nparse. This option can be a string, array of strings, or a function. If not\na function, "),t("code",[e._v("type")]),e._v(" option is passed directly to the\n"),t("a",{attrs:{href:"https://www.npmjs.org/package/type-is#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-is"),t("OutboundLink")],1),e._v(" library and this can\nbe an extension name (like "),t("code",[e._v("urlencoded")]),e._v("), a mime type (like\n"),t("code",[e._v("application/x-www-form-urlencoded")]),e._v("), or a mime type with a wildcard (like\n"),t("code",[e._v("*/x-www-form-urlencoded")]),e._v("). If a function, the "),t("code",[e._v("type")]),e._v(" option is called as\n"),t("code",[e._v("fn(req)")]),e._v(" and the request is parsed if it returns a truthy value. Defaults\nto "),t("code",[e._v("application/x-www-form-urlencoded")]),e._v(".")]),e._v(" "),t("h5",{attrs:{id:"verify-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verify-4"}},[e._v("#")]),e._v(" verify")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("verify")]),e._v(" option, if supplied, is called as "),t("code",[e._v("verify(req, res, buf, encoding)")]),e._v(",\nwhere "),t("code",[e._v("buf")]),e._v(" is a "),t("code",[e._v("Buffer")]),e._v(" of the raw request body and "),t("code",[e._v("encoding")]),e._v(" is the\nencoding of the request. The parsing can be aborted by throwing an error.")]),e._v(" "),t("h4",{attrs:{id:"depth"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#depth"}},[e._v("#")]),e._v(" depth")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("depth")]),e._v(" option is used to configure the maximum depth of the "),t("code",[e._v("qs")]),e._v(" library when "),t("code",[e._v("extended")]),e._v(" is "),t("code",[e._v("true")]),e._v(". This allows you to limit the amount of keys that are parsed and can be useful to prevent certain types of abuse. Defaults to "),t("code",[e._v("32")]),e._v(". It is recommended to keep this value as low as possible.")]),e._v(" "),t("h2",{attrs:{id:"errors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#errors"}},[e._v("#")]),e._v(" Errors")]),e._v(" "),t("p",[e._v("The middlewares provided by this module create errors using the\n"),t("a",{attrs:{href:"https://www.npmjs.com/package/http-errors",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("http-errors")]),e._v(" module"),t("OutboundLink")],1),e._v(". The errors\nwill typically have a "),t("code",[e._v("status")]),e._v("/"),t("code",[e._v("statusCode")]),e._v(" property that contains the suggested\nHTTP response code, an "),t("code",[e._v("expose")]),e._v(" property to determine if the "),t("code",[e._v("message")]),e._v(" property\nshould be displayed to the client, a "),t("code",[e._v("type")]),e._v(" property to determine the type of\nerror without matching against the "),t("code",[e._v("message")]),e._v(", and a "),t("code",[e._v("body")]),e._v(" property containing\nthe read body, if available.")]),e._v(" "),t("p",[e._v("The following are the common errors created, though any error can come through\nfor various reasons.")]),e._v(" "),t("h3",{attrs:{id:"content-encoding-unsupported"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#content-encoding-unsupported"}},[e._v("#")]),e._v(" content encoding unsupported")]),e._v(" "),t("p",[e._v("This error will occur when the request had a "),t("code",[e._v("Content-Encoding")]),e._v(' header that\ncontained an encoding but the "inflation" option was set to '),t("code",[e._v("false")]),e._v(". The\n"),t("code",[e._v("status")]),e._v(" property is set to "),t("code",[e._v("415")]),e._v(", the "),t("code",[e._v("type")]),e._v(" property is set to\n"),t("code",[e._v("'encoding.unsupported'")]),e._v(", and the "),t("code",[e._v("charset")]),e._v(" property will be set to the\nencoding that is unsupported.")]),e._v(" "),t("h3",{attrs:{id:"entity-parse-failed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entity-parse-failed"}},[e._v("#")]),e._v(" entity parse failed")]),e._v(" "),t("p",[e._v("This error will occur when the request contained an entity that could not be\nparsed by the middleware. The "),t("code",[e._v("status")]),e._v(" property is set to "),t("code",[e._v("400")]),e._v(", the "),t("code",[e._v("type")]),e._v("\nproperty is set to "),t("code",[e._v("'entity.parse.failed'")]),e._v(", and the "),t("code",[e._v("body")]),e._v(" property is set to\nthe entity value that failed parsing.")]),e._v(" "),t("h3",{attrs:{id:"entity-verify-failed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entity-verify-failed"}},[e._v("#")]),e._v(" entity verify failed")]),e._v(" "),t("p",[e._v("This error will occur when the request contained an entity that could not be\nfailed verification by the defined "),t("code",[e._v("verify")]),e._v(" option. The "),t("code",[e._v("status")]),e._v(" property is\nset to "),t("code",[e._v("403")]),e._v(", the "),t("code",[e._v("type")]),e._v(" property is set to "),t("code",[e._v("'entity.verify.failed'")]),e._v(", and the\n"),t("code",[e._v("body")]),e._v(" property is set to the entity value that failed verification.")]),e._v(" "),t("h3",{attrs:{id:"request-aborted"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#request-aborted"}},[e._v("#")]),e._v(" request aborted")]),e._v(" "),t("p",[e._v("This error will occur when the request is aborted by the client before reading\nthe body has finished. The "),t("code",[e._v("received")]),e._v(" property will be set to the number of\nbytes received before the request was aborted and the "),t("code",[e._v("expected")]),e._v(" property is\nset to the number of expected bytes. The "),t("code",[e._v("status")]),e._v(" property is set to "),t("code",[e._v("400")]),e._v("\nand "),t("code",[e._v("type")]),e._v(" property is set to "),t("code",[e._v("'request.aborted'")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"request-entity-too-large"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#request-entity-too-large"}},[e._v("#")]),e._v(" request entity too large")]),e._v(" "),t("p",[e._v('This error will occur when the request body\'s size is larger than the "limit"\noption. The '),t("code",[e._v("limit")]),e._v(" property will be set to the byte limit and the "),t("code",[e._v("length")]),e._v("\nproperty will be set to the request body's length. The "),t("code",[e._v("status")]),e._v(" property is\nset to "),t("code",[e._v("413")]),e._v(" and the "),t("code",[e._v("type")]),e._v(" property is set to "),t("code",[e._v("'entity.too.large'")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"request-size-did-not-match-content-length"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#request-size-did-not-match-content-length"}},[e._v("#")]),e._v(" request size did not match content length")]),e._v(" "),t("p",[e._v("This error will occur when the request's length did not match the length from\nthe "),t("code",[e._v("Content-Length")]),e._v(" header. This typically occurs when the request is malformed,\ntypically when the "),t("code",[e._v("Content-Length")]),e._v(" header was calculated based on characters\ninstead of bytes. The "),t("code",[e._v("status")]),e._v(" property is set to "),t("code",[e._v("400")]),e._v(" and the "),t("code",[e._v("type")]),e._v(" property\nis set to "),t("code",[e._v("'request.size.invalid'")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"stream-encoding-should-not-be-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream-encoding-should-not-be-set"}},[e._v("#")]),e._v(" stream encoding should not be set")]),e._v(" "),t("p",[e._v("This error will occur when something called the "),t("code",[e._v("req.setEncoding")]),e._v(" method prior\nto this middleware. This module operates directly on bytes only and you cannot\ncall "),t("code",[e._v("req.setEncoding")]),e._v(" when using this module. The "),t("code",[e._v("status")]),e._v(" property is set to\n"),t("code",[e._v("500")]),e._v(" and the "),t("code",[e._v("type")]),e._v(" property is set to "),t("code",[e._v("'stream.encoding.set'")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"stream-is-not-readable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream-is-not-readable"}},[e._v("#")]),e._v(" stream is not readable")]),e._v(" "),t("p",[e._v("This error will occur when the request is no longer readable when this middleware\nattempts to read it. This typically means something other than a middleware from\nthis module read the request body already and the middleware was also configured to\nread the same request. The "),t("code",[e._v("status")]),e._v(" property is set to "),t("code",[e._v("500")]),e._v(" and the "),t("code",[e._v("type")]),e._v("\nproperty is set to "),t("code",[e._v("'stream.not.readable'")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"too-many-parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#too-many-parameters"}},[e._v("#")]),e._v(" too many parameters")]),e._v(" "),t("p",[e._v("This error will occur when the content of the request exceeds the configured\n"),t("code",[e._v("parameterLimit")]),e._v(" for the "),t("code",[e._v("urlencoded")]),e._v(" parser. The "),t("code",[e._v("status")]),e._v(" property is set to\n"),t("code",[e._v("413")]),e._v(" and the "),t("code",[e._v("type")]),e._v(" property is set to "),t("code",[e._v("'parameters.too.many'")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"unsupported-charset-bogus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unsupported-charset-bogus"}},[e._v("#")]),e._v(' unsupported charset "BOGUS"')]),e._v(" "),t("p",[e._v("This error will occur when the request had a charset parameter in the\n"),t("code",[e._v("Content-Type")]),e._v(" header, but the "),t("code",[e._v("iconv-lite")]),e._v(" module does not support it OR the\nparser does not support it. The charset is contained in the message as well\nas in the "),t("code",[e._v("charset")]),e._v(" property. The "),t("code",[e._v("status")]),e._v(" property is set to "),t("code",[e._v("415")]),e._v(", the\n"),t("code",[e._v("type")]),e._v(" property is set to "),t("code",[e._v("'charset.unsupported'")]),e._v(", and the "),t("code",[e._v("charset")]),e._v(" property\nis set to the charset that is unsupported.")]),e._v(" "),t("h3",{attrs:{id:"unsupported-content-encoding-bogus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unsupported-content-encoding-bogus"}},[e._v("#")]),e._v(' unsupported content encoding "bogus"')]),e._v(" "),t("p",[e._v("This error will occur when the request had a "),t("code",[e._v("Content-Encoding")]),e._v(" header that\ncontained an unsupported encoding. The encoding is contained in the message\nas well as in the "),t("code",[e._v("encoding")]),e._v(" property. The "),t("code",[e._v("status")]),e._v(" property is set to "),t("code",[e._v("415")]),e._v(",\nthe "),t("code",[e._v("type")]),e._v(" property is set to "),t("code",[e._v("'encoding.unsupported'")]),e._v(", and the "),t("code",[e._v("encoding")]),e._v("\nproperty is set to the encoding that is unsupported.")]),e._v(" "),t("h3",{attrs:{id:"the-input-exceeded-the-depth"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-input-exceeded-the-depth"}},[e._v("#")]),e._v(" The input exceeded the depth")]),e._v(" "),t("p",[e._v("This error occurs when using "),t("code",[e._v("bodyParser.urlencoded")]),e._v(" with the "),t("code",[e._v("extended")]),e._v(" property set to "),t("code",[e._v("true")]),e._v(" and the input exceeds the configured "),t("code",[e._v("depth")]),e._v(" option. The "),t("code",[e._v("status")]),e._v(" property is set to "),t("code",[e._v("400")]),e._v(". It is recommended to review the "),t("code",[e._v("depth")]),e._v(" option and evaluate if it requires a higher value. When the "),t("code",[e._v("depth")]),e._v(" option is set to "),t("code",[e._v("32")]),e._v(" (default value), the error will not be thrown.")]),e._v(" "),t("h2",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),t("h3",{attrs:{id:"express-connect-top-level-generic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#express-connect-top-level-generic"}},[e._v("#")]),e._v(" Express/Connect top-level generic")]),e._v(" "),t("p",[e._v("This example demonstrates adding a generic JSON and URL-encoded parser as a\ntop-level middleware, which will parse the bodies of all incoming requests.\nThis is the simplest setup.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" express "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'express'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" bodyParser "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'body-parser'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" app "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("express")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// parse application/x-www-form-urlencoded")]),e._v("\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("use")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("bodyParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("urlencoded")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("extended")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// parse application/json")]),e._v("\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("use")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("bodyParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("json")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("use")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("setHeader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Content-Type'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'text/plain'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'you posted:\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("end")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("JSON")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("stringify")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("h3",{attrs:{id:"express-route-specific"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#express-route-specific"}},[e._v("#")]),e._v(" Express route-specific")]),e._v(" "),t("p",[e._v("This example demonstrates adding body parsers specifically to the routes that\nneed them. In general, this is the most recommended way to use body-parser with\nExpress.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" express "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'express'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" bodyParser "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'body-parser'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" app "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("express")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// create application/json parser")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" jsonParser "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" bodyParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("json")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// create application/x-www-form-urlencoded parser")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" urlencodedParser "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" bodyParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("urlencoded")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("extended")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// POST /login gets urlencoded bodies")]),e._v("\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("post")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/login'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" urlencodedParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'welcome, '")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// POST /api/users gets JSON bodies")]),e._v("\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("post")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/api/users'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" jsonParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("req"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// create user in req.body")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("h3",{attrs:{id:"change-accepted-type-for-parsers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#change-accepted-type-for-parsers"}},[e._v("#")]),e._v(" Change accepted type for parsers")]),e._v(" "),t("p",[e._v("All the parsers accept a "),t("code",[e._v("type")]),e._v(" option which allows you to change the\n"),t("code",[e._v("Content-Type")]),e._v(" that the middleware will parse.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" express "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'express'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" bodyParser "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'body-parser'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" app "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("express")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// parse various different custom JSON types as JSON")]),e._v("\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("use")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("bodyParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("json")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'application/*+json'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// parse some custom thing into a Buffer")]),e._v("\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("use")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("bodyParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("raw")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'application/vnd.custom-type'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// parse an HTML body into a string")]),e._v("\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("use")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("bodyParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("text")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'text/html'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("h2",{attrs:{id:"license"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#license"}},[e._v("#")]),e._v(" License")]),e._v(" "),t("p",[t("a",{attrs:{href:"LICENSE"}},[e._v("MIT")])])])}),[],!1,null,null,null);t.default=r.exports}}]);
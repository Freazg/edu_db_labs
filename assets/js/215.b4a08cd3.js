(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{744:function(e,s,t){"use strict";t.r(s);var o=t(21),n=Object(o.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"pg-connection-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pg-connection-string"}},[e._v("#")]),e._v(" pg-connection-string")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://nodei.co/npm/pg-connection-string/",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://nodei.co/npm/pg-connection-string.png?compact=true",alt:"NPM"}}),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("Functions for dealing with a PostgresSQL connection string")]),e._v(" "),s("p",[s("code",[e._v("parse")]),e._v(" method taken from "),s("a",{attrs:{href:"https://github.com/brianc/node-postgres.git",target:"_blank",rel:"noopener noreferrer"}},[e._v("node-postgres"),s("OutboundLink")],1),e._v("\nCopyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\nMIT License")]),e._v(" "),s("h2",{attrs:{id:"usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" parse "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'pg-connection-string'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("parse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" config "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'postgres://someuser:somepassword@somehost:381/somedatabase'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("p",[e._v("The resulting config contains a subset of the following properties:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("user")]),e._v(" - User with which to authenticate to the server")]),e._v(" "),s("li",[s("code",[e._v("password")]),e._v(" - Corresponding password")]),e._v(" "),s("li",[s("code",[e._v("host")]),e._v(" - Postgres server hostname or, for UNIX domain sockets, the socket filename")]),e._v(" "),s("li",[s("code",[e._v("port")]),e._v(" - port on which to connect")]),e._v(" "),s("li",[s("code",[e._v("database")]),e._v(" - Database name within the server")]),e._v(" "),s("li",[s("code",[e._v("client_encoding")]),e._v(" - string encoding the client will use")]),e._v(" "),s("li",[s("code",[e._v("ssl")]),e._v(", either a boolean or an object with properties\n"),s("ul",[s("li",[s("code",[e._v("rejectUnauthorized")])]),e._v(" "),s("li",[s("code",[e._v("cert")])]),e._v(" "),s("li",[s("code",[e._v("key")])]),e._v(" "),s("li",[s("code",[e._v("ca")])])])]),e._v(" "),s("li",[e._v("any other query parameters (for example, "),s("code",[e._v("application_name")]),e._v(") are preserved intact.")])]),e._v(" "),s("h3",{attrs:{id:"clientconfig-compatibility-for-typescript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clientconfig-compatibility-for-typescript"}},[e._v("#")]),e._v(" ClientConfig Compatibility for TypeScript")]),e._v(" "),s("p",[e._v("The pg-connection-string "),s("code",[e._v("ConnectionOptions")]),e._v(" interface is not compatible with the "),s("code",[e._v("ClientConfig")]),e._v(" interface that "),s("a",{attrs:{href:"https://node-postgres.com/apis/client",target:"_blank",rel:"noopener noreferrer"}},[e._v("pg.Client"),s("OutboundLink")],1),e._v(" expects. To remedy this, use the "),s("code",[e._v("parseIntoClientConfig")]),e._v(" function instead of "),s("code",[e._v("parse")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" ClientConfig "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'pg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" parseIntoClientConfig "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'pg-connection-string'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" config"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" ClientConfig "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("parseIntoClientConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'postgres://someuser:somepassword@somehost:381/somedatabase'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("p",[e._v("You can also use "),s("code",[e._v("toClientConfig")]),e._v(" to convert an existing "),s("code",[e._v("ConnectionOptions")]),e._v(" interface into a "),s("code",[e._v("ClientConfig")]),e._v(" interface:")]),e._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" ClientConfig "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'pg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" parse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" toClientConfig "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'pg-connection-string'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" config "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'postgres://someuser:somepassword@somehost:381/somedatabase'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" clientConfig"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" ClientConfig "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("toClientConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("h2",{attrs:{id:"connection-strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connection-strings"}},[e._v("#")]),e._v(" Connection Strings")]),e._v(" "),s("p",[e._v("The short summary of acceptable URLs is:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("socket:<path>?<query>")]),e._v(" - UNIX domain socket")]),e._v(" "),s("li",[s("code",[e._v("postgres://<user>:<password>@<host>:<port>/<database>?<query>")]),e._v(" - TCP connection")])]),e._v(" "),s("p",[e._v("But see below for more details.")]),e._v(" "),s("h3",{attrs:{id:"unix-domain-sockets"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unix-domain-sockets"}},[e._v("#")]),e._v(" UNIX Domain Sockets")]),e._v(" "),s("p",[e._v("When user and password are not given, the socket path follows "),s("code",[e._v("socket:")]),e._v(", as in "),s("code",[e._v("socket:/var/run/pgsql")]),e._v(".\nThis form can be shortened to just a path: "),s("code",[e._v("/var/run/pgsql")]),e._v(".")]),e._v(" "),s("p",[e._v("When user and password are given, they are included in the typical URL positions, with an empty "),s("code",[e._v("host")]),e._v(", as in "),s("code",[e._v("socket://user:pass@/var/run/pgsql")]),e._v(".")]),e._v(" "),s("p",[e._v("Query parameters follow a "),s("code",[e._v("?")]),e._v(" character, including the following special query parameters:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("db=<database>")]),e._v(" - sets the database name (urlencoded)")]),e._v(" "),s("li",[s("code",[e._v("encoding=<encoding>")]),e._v(" - sets the "),s("code",[e._v("client_encoding")]),e._v(" property")])]),e._v(" "),s("h3",{attrs:{id:"tcp-connections"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-connections"}},[e._v("#")]),e._v(" TCP Connections")]),e._v(" "),s("p",[e._v("TCP connections to the Postgres server are indicated with "),s("code",[e._v("pg:")]),e._v(" or "),s("code",[e._v("postgres:")]),e._v(" schemes (in fact, any scheme but "),s("code",[e._v("socket:")]),e._v(" is accepted).\nIf username and password are included, they should be urlencoded.\nThe database name, however, should "),s("em",[e._v("not")]),e._v(" be urlencoded.")]),e._v(" "),s("p",[e._v("Query parameters follow a "),s("code",[e._v("?")]),e._v(" character, including the following special query parameters:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("host=<host>")]),e._v(" - sets "),s("code",[e._v("host")]),e._v(" property, overriding the URL's host")]),e._v(" "),s("li",[s("code",[e._v("encoding=<encoding>")]),e._v(" - sets the "),s("code",[e._v("client_encoding")]),e._v(" property")]),e._v(" "),s("li",[s("code",[e._v("ssl=1")]),e._v(", "),s("code",[e._v("ssl=true")]),e._v(", "),s("code",[e._v("ssl=0")]),e._v(", "),s("code",[e._v("ssl=false")]),e._v(" - sets "),s("code",[e._v("ssl")]),e._v(" to true or false, accordingly")]),e._v(" "),s("li",[s("code",[e._v("uselibpqcompat=true")]),e._v(" - use libpq semantics")]),e._v(" "),s("li",[s("code",[e._v("sslmode=<sslmode>")]),e._v(" when "),s("code",[e._v("sslcompat")]),e._v(" is not set\n"),s("ul",[s("li",[s("code",[e._v("sslmode=disable")]),e._v(" - sets "),s("code",[e._v("ssl")]),e._v(" to false")]),e._v(" "),s("li",[s("code",[e._v("sslmode=no-verify")]),e._v(" - sets "),s("code",[e._v("ssl")]),e._v(" to "),s("code",[e._v("{ rejectUnauthorized: false }")])]),e._v(" "),s("li",[s("code",[e._v("sslmode=prefer")]),e._v(", "),s("code",[e._v("sslmode=require")]),e._v(", "),s("code",[e._v("sslmode=verify-ca")]),e._v(", "),s("code",[e._v("sslmode=verify-full")]),e._v(" - sets "),s("code",[e._v("ssl")]),e._v(" to true")])])]),e._v(" "),s("li",[s("code",[e._v("sslmode=<sslmode>")]),e._v(" when "),s("code",[e._v("sslcompat=libpq")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("sslmode=disable")]),e._v(" - sets "),s("code",[e._v("ssl")]),e._v(" to false")]),e._v(" "),s("li",[s("code",[e._v("sslmode=prefer")]),e._v(" - sets "),s("code",[e._v("ssl")]),e._v(" to "),s("code",[e._v("{ rejectUnauthorized: false }")])]),e._v(" "),s("li",[s("code",[e._v("sslmode=require")]),e._v(" - sets "),s("code",[e._v("ssl")]),e._v(" to "),s("code",[e._v("{ rejectUnauthorized: false }")]),e._v(" unless "),s("code",[e._v("sslrootcert")]),e._v(" is specified, in which case it behaves like "),s("code",[e._v("verify-ca")])]),e._v(" "),s("li",[s("code",[e._v("sslmode=verify-ca")]),e._v(" - sets "),s("code",[e._v("ssl")]),e._v(" to "),s("code",[e._v("{ checkServerIdentity: no-op }")]),e._v(" (verify CA, but not server identity). This verifies the presented certificate against the effective CA specified in sslrootcert.")]),e._v(" "),s("li",[s("code",[e._v("sslmode=verify-full")]),e._v(" - sets "),s("code",[e._v("ssl")]),e._v(" to "),s("code",[e._v("{}")]),e._v(" (verify CA and server identity)")])])]),e._v(" "),s("li",[s("code",[e._v("sslcert=<filename>")]),e._v(" - reads data from the given file and includes the result as "),s("code",[e._v("ssl.cert")])]),e._v(" "),s("li",[s("code",[e._v("sslkey=<filename>")]),e._v(" - reads data from the given file and includes the result as "),s("code",[e._v("ssl.key")])]),e._v(" "),s("li",[s("code",[e._v("sslrootcert=<filename>")]),e._v(" - reads data from the given file and includes the result as "),s("code",[e._v("ssl.ca")])])]),e._v(" "),s("p",[e._v("A bare relative URL, such as "),s("code",[e._v("salesdata")]),e._v(", will indicate a database name while leaving other properties empty.")]),e._v(" "),s("blockquote",[s("p",[e._v("[!CAUTION]\nChoosing an sslmode other than verify-full has serious security implications. Please read https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-SSLMODE-STATEMENTS to understand the trade-offs.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[272],{798:function(e,t,a){"use strict";a.r(t);var s=a(21),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"node-tar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-tar"}},[e._v("#")]),e._v(" node-tar")]),e._v(" "),t("p",[e._v("Fast and full-featured Tar for Node.js")]),e._v(" "),t("p",[e._v("The API is designed to mimic the behavior of "),t("code",[e._v("tar(1)")]),e._v(" on unix systems.\nIf you are familiar with how tar works, most of this will hopefully be\nstraightforward for you.  If not, then hopefully this module can teach\nyou useful unix skills that may come in handy someday ðŸ˜ƒ")]),e._v(" "),t("h2",{attrs:{id:"background"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[e._v("#")]),e._v(" Background")]),e._v(" "),t("p",[e._v('A "tar file" or "tarball" is an archive of file system entries\n(directories, files, links, etc.)  The name comes from "tape archive".\nIf you run '),t("code",[e._v("man tar")]),e._v(" on almost any Unix command line, you'll learn\nquite a bit about what it can do, and its history.")]),e._v(" "),t("p",[e._v("Tar has 5 main top-level commands:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("c")]),e._v(" Create an archive")]),e._v(" "),t("li",[t("code",[e._v("r")]),e._v(" Replace entries within an archive")]),e._v(" "),t("li",[t("code",[e._v("u")]),e._v(" Update entries within an archive (ie, replace if they're newer)")]),e._v(" "),t("li",[t("code",[e._v("t")]),e._v(" List out the contents of an archive")]),e._v(" "),t("li",[t("code",[e._v("x")]),e._v(" Extract an archive to disk")])]),e._v(" "),t("p",[e._v("The other flags and options modify how this top level function works.")]),e._v(" "),t("h2",{attrs:{id:"high-level-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#high-level-api"}},[e._v("#")]),e._v(" High-Level API")]),e._v(" "),t("p",[e._v("These 5 functions are the high-level API.  All of them have a\nsingle-character name (for unix nerds familiar with "),t("code",[e._v("tar(1)")]),e._v(") as well\nas a long name (for everyone else).")]),e._v(" "),t("p",[e._v("All the high-level functions take the following arguments, all three\nof which are optional and may be omitted.")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("options")]),e._v(" - An optional object specifying various options")]),e._v(" "),t("li",[t("code",[e._v("paths")]),e._v(" - An array of paths to add or extract")]),e._v(" "),t("li",[t("code",[e._v("callback")]),e._v(" - Called when the command is completed, if async.  (If\nsync or no file specified, providing a callback throws a\n"),t("code",[e._v("TypeError")]),e._v(".)")])]),e._v(" "),t("p",[e._v("If the command is sync (ie, if "),t("code",[e._v("options.sync=true")]),e._v("), then the\ncallback is not allowed, since the action will be completed immediately.")]),e._v(" "),t("p",[e._v("If a "),t("code",[e._v("file")]),e._v(" argument is specified, and the command is async, then a\n"),t("code",[e._v("Promise")]),e._v(" is returned.  In this case, if async, a callback may be\nprovided which is called when the command is completed.")]),e._v(" "),t("p",[e._v("If a "),t("code",[e._v("file")]),e._v(" option is not specified, then a stream is returned.  For\n"),t("code",[e._v("create")]),e._v(", this is a readable stream of the generated archive.  For\n"),t("code",[e._v("list")]),e._v(" and "),t("code",[e._v("extract")]),e._v(" this is a writable stream that an archive should\nbe written into.  If a file is not specified, then a callback is not\nallowed, because you're already getting a stream to work with.")]),e._v(" "),t("p",[t("code",[e._v("replace")]),e._v(" and "),t("code",[e._v("update")]),e._v(" only work on existing archives, and so require\na "),t("code",[e._v("file")]),e._v(" argument.")]),e._v(" "),t("p",[e._v("Sync commands without a file argument return a stream that acts on its\ninput immediately in the same tick.  For readable streams, this means\nthat all of the data is immediately available by calling\n"),t("code",[e._v("stream.read()")]),e._v(".  For writable streams, it will be acted upon as soon\nas it is provided, but this can be at any time.")]),e._v(" "),t("h3",{attrs:{id:"warnings-and-errors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#warnings-and-errors"}},[e._v("#")]),e._v(" Warnings and Errors")]),e._v(" "),t("p",[e._v("Tar emits warnings and errors for recoverable and unrecoverable situations,\nrespectively.  In many cases, a warning only affects a single entry in an\narchive, or is simply informing you that it's modifying an entry to comply\nwith the settings provided.")]),e._v(" "),t("p",[e._v("Unrecoverable warnings will always raise an error (ie, emit "),t("code",[e._v("'error'")]),e._v(" on\nstreaming actions, throw for non-streaming sync actions, reject the\nreturned Promise for non-streaming async operations, or call a provided\ncallback with an "),t("code",[e._v("Error")]),e._v(" as the first argument).  Recoverable errors will\nraise an error only if "),t("code",[e._v("strict: true")]),e._v(" is set in the options.")]),e._v(" "),t("p",[e._v("Respond to (recoverable) warnings by listening to the "),t("code",[e._v("warn")]),e._v(" event.\nHandlers receive 3 arguments:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("code")]),e._v(" String.  One of the error codes below.  This may not match\n"),t("code",[e._v("data.code")]),e._v(", which preserves the original error code from fs and zlib.")]),e._v(" "),t("li",[t("code",[e._v("message")]),e._v(" String.  More details about the error.")]),e._v(" "),t("li",[t("code",[e._v("data")]),e._v(" Metadata about the error.  An "),t("code",[e._v("Error")]),e._v(" object for errors raised by\nfs and zlib.  All fields are attached to errors raisd by tar.  Typically\ncontains the following fields, as relevant:\n"),t("ul",[t("li",[t("code",[e._v("tarCode")]),e._v(" The tar error code.")]),e._v(" "),t("li",[t("code",[e._v("code")]),e._v(" Either the tar error code, or the error code set by the\nunderlying system.")]),e._v(" "),t("li",[t("code",[e._v("file")]),e._v(" The archive file being read or written.")]),e._v(" "),t("li",[t("code",[e._v("cwd")]),e._v(" Working directory for creation and extraction operations.")]),e._v(" "),t("li",[t("code",[e._v("entry")]),e._v(" The entry object (if it could be created) for "),t("code",[e._v("TAR_ENTRY_INFO")]),e._v(",\n"),t("code",[e._v("TAR_ENTRY_INVALID")]),e._v(", and "),t("code",[e._v("TAR_ENTRY_ERROR")]),e._v(" warnings.")]),e._v(" "),t("li",[t("code",[e._v("header")]),e._v(" The header object (if it could be created, and the entry could\nnot be created) for "),t("code",[e._v("TAR_ENTRY_INFO")]),e._v(" and "),t("code",[e._v("TAR_ENTRY_INVALID")]),e._v(" warnings.")]),e._v(" "),t("li",[t("code",[e._v("recoverable")]),e._v(" Boolean.  If "),t("code",[e._v("false")]),e._v(", then the warning will emit an\n"),t("code",[e._v("error")]),e._v(", even in non-strict mode.")])])])]),e._v(" "),t("h4",{attrs:{id:"error-codes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#error-codes"}},[e._v("#")]),e._v(" Error Codes")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("TAR_ENTRY_INFO")]),e._v("  An informative error indicating that an entry is being\nmodified, but otherwise processed normally.  For example, removing "),t("code",[e._v("/")]),e._v(" or\n"),t("code",[e._v("C:\\")]),e._v(" from absolute paths if "),t("code",[e._v("preservePaths")]),e._v(" is not set.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("TAR_ENTRY_INVALID")]),e._v(" An indication that a given entry is not a valid tar\narchive entry, and will be skipped.  This occurs when:")]),e._v(" "),t("ul",[t("li",[e._v("a checksum fails,")]),e._v(" "),t("li",[e._v("a "),t("code",[e._v("linkpath")]),e._v(" is missing for a link type, or")]),e._v(" "),t("li",[e._v("a "),t("code",[e._v("linkpath")]),e._v(" is provided for a non-link type.")])]),e._v(" "),t("p",[e._v("If every entry in a parsed archive raises an "),t("code",[e._v("TAR_ENTRY_INVALID")]),e._v(" error,\nthen the archive is presumed to be unrecoverably broken, and\n"),t("code",[e._v("TAR_BAD_ARCHIVE")]),e._v(" will be raised.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("TAR_ENTRY_ERROR")]),e._v(" The entry appears to be a valid tar archive entry, but\nencountered an error which prevented it from being unpacked.  This occurs\nwhen:")]),e._v(" "),t("ul",[t("li",[e._v("an unrecoverable fs error happens during unpacking,")]),e._v(" "),t("li",[e._v("an entry is trying to extract into an excessively deep\nlocation (by default, limited to 1024 subfolders),")]),e._v(" "),t("li",[e._v("an entry has "),t("code",[e._v("..")]),e._v(" in the path and "),t("code",[e._v("preservePaths")]),e._v(" is not set, or")]),e._v(" "),t("li",[e._v("an entry is extracting through a symbolic link, when "),t("code",[e._v("preservePaths")]),e._v(" is\nnot set.")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("TAR_ENTRY_UNSUPPORTED")]),e._v("  An indication that a given entry is\na valid archive entry, but of a type that is unsupported, and so will be\nskipped in archive creation or extracting.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("TAR_ABORT")]),e._v("  When parsing gzipped-encoded archives, the parser will\nabort the parse process raise a warning for any zlib errors encountered.\nAborts are considered unrecoverable for both parsing and unpacking.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("TAR_BAD_ARCHIVE")]),e._v("  The archive file is totally hosed.  This can happen for\na number of reasons, and always occurs at the end of a parse or extract:")]),e._v(" "),t("ul",[t("li",[e._v("An entry body was truncated before seeing the full number of bytes.")]),e._v(" "),t("li",[e._v("The archive contained only invalid entries, indicating that it is\nlikely not an archive, or at least, not an archive this library can\nparse.")])]),e._v(" "),t("p",[t("code",[e._v("TAR_BAD_ARCHIVE")]),e._v(" is considered informative for parse operations, but\nunrecoverable for extraction.  Note that, if encountered at the end of an\nextraction, tar WILL still have extracted as much it could from the\narchive, so there may be some garbage files to clean up.")])])]),e._v(" "),t("p",[e._v("Errors that occur deeper in the system (ie, either the filesystem or zlib)\nwill have their error codes left intact, and a "),t("code",[e._v("tarCode")]),e._v(" matching one of\nthe above will be added to the warning metadata or the raised error object.")]),e._v(" "),t("p",[e._v("Errors generated by tar will have one of the above codes set as the\n"),t("code",[e._v("error.code")]),e._v(" field as well, but since errors originating in zlib or fs will\nhave their original codes, it's better to read "),t("code",[e._v("error.tarCode")]),e._v(" if you wish\nto see how tar is handling the issue.")]),e._v(" "),t("h3",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),t("p",[e._v("The API mimics the "),t("code",[e._v("tar(1)")]),e._v(" command line functionality, with aliases\nfor more human-readable option and function names.  The goal is that\nif you know how to use "),t("code",[e._v("tar(1)")]),e._v(" in Unix, then you know how to use\n"),t("code",[e._v("require('tar')")]),e._v(" in JavaScript.")]),e._v(" "),t("p",[e._v("To replicate "),t("code",[e._v("tar czf my-tarball.tgz files and folders")]),e._v(", you'd do:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("tar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("c")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("gzip")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("gzip options"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("file")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'my-tarball.tgz'")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'some'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'files'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'and'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'folders'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("_")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" tarball has been created "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("To replicate "),t("code",[e._v("tar cz files and folders > my-tarball.tgz")]),e._v(", you'd do:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("tar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("c")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// or tar.create")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("gzip")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("gzip options"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'some'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'files'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'and'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'folders'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("pipe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("fs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("createWriteStream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'my-tarball.tgz'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("To replicate "),t("code",[e._v("tar xf my-tarball.tgz")]),e._v(" you'd do:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("tar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// or tar.extract(")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("file")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'my-tarball.tgz'")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("_")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" tarball has been dumped "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" cwd "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("To replicate "),t("code",[e._v("cat my-tarball.tgz | tar x -C some-dir --strip=1")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("fs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("createReadStream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'my-tarball.tgz'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("pipe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  tar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("strip")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("C")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'some-dir'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// alias for cwd:'some-dir', also ok")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("To replicate "),t("code",[e._v("tar tf my-tarball.tgz")]),e._v(", do this:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("tar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("t")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("file")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'my-tarball.tgz'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("onentry")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("entry")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" whatever "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" it "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("For example, to just get the list of filenames from an archive:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("getEntryFilenames")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("async")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("tarballFilename")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" filenames "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("await")]),e._v(" tar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("t")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("file")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" tarballFilename"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("onentry")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("entry")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" filenames"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("path"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" filenames\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("To replicate "),t("code",[e._v("cat my-tarball.tgz | tar t")]),e._v(" do:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("fs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("createReadStream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'my-tarball.tgz'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("pipe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("tar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("t")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'entry'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("entry")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" whatever "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" it "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("To do anything synchronous, add "),t("code",[e._v("sync: true")]),e._v(" to the options.  Note\nthat sync functions don't take a callback and don't return a promise.\nWhen the function returns, it's already done.  Sync methods without a\nfile argument return a sync stream, which flushes immediately.  But,\nof course, it still won't be done until you "),t("code",[e._v(".end()")]),e._v(" it.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("getEntryFilenamesSync")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("tarballFilename")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" filenames "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  tar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("t")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("file")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" tarballFilename"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("onentry")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("entry")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" filenames"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("path"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("sync")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" filenames\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("To filter entries, add "),t("code",[e._v("filter: <function>")]),e._v(" to the options.\nTar-creating methods call the filter with "),t("code",[e._v("filter(path, stat)")]),e._v(".\nTar-reading methods (including extraction) call the filter with\n"),t("code",[e._v("filter(path, entry)")]),e._v(".  The filter is called in the "),t("code",[e._v("this")]),e._v("-context of\nthe "),t("code",[e._v("Pack")]),e._v(" or "),t("code",[e._v("Unpack")]),e._v(" stream object.")]),e._v(" "),t("p",[e._v("The arguments list to "),t("code",[e._v("tar t")]),e._v(" and "),t("code",[e._v("tar x")]),e._v(" specify a list of filenames\nto extract or list, so they're equivalent to a filter that tests if\nthe file is in the list.")]),e._v(" "),t("p",[e._v("For those who "),t("em",[e._v("aren't")]),e._v(" fans of tar's single-character command names:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("tar.c === tar.create\ntar.r === tar.replace (appends to archive, file is required)\ntar.u === tar.update (appends if newer, file is required)\ntar.x === tar.extract\ntar.t === tar.list\n")])])]),t("p",[e._v("Keep reading for all the command descriptions and options, as well as\nthe low-level API that they are built on.")]),e._v(" "),t("h3",{attrs:{id:"tar-c-options-filelist-callback-alias-tar-create"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-c-options-filelist-callback-alias-tar-create"}},[e._v("#")]),e._v(" tar.c(options, fileList, callback) [alias: tar.create]")]),e._v(" "),t("p",[e._v("Create a tarball archive.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("fileList")]),e._v(" is an array of paths to add to the tarball.  Adding a\ndirectory also adds its children recursively.")]),e._v(" "),t("p",[e._v("An entry in "),t("code",[e._v("fileList")]),e._v(" that starts with an "),t("code",[e._v("@")]),e._v(" symbol is a tar archive\nwhose entries will be added.  To add a file that starts with "),t("code",[e._v("@")]),e._v(",\nprepend it with "),t("code",[e._v("./")]),e._v(".")]),e._v(" "),t("p",[e._v("The following options are supported:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("file")]),e._v(" Write the tarball archive to the specified filename.  If this\nis specified, then the callback will be fired when the file has been\nwritten, and a promise will be returned that resolves when the file\nis written.  If a filename is not specified, then a Readable Stream\nwill be returned which will emit the file data. [Alias: "),t("code",[e._v("f")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("sync")]),e._v(" Act synchronously.  If this is set, then any provided file\nwill be fully written after the call to "),t("code",[e._v("tar.c")]),e._v(".  If this is set,\nand a file is not provided, then the resulting stream will already\nhave the data ready to "),t("code",[e._v("read")]),e._v(" or "),t("code",[e._v("emit('data')")]),e._v(" as soon as you\nrequest it.")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("cwd")]),e._v(" The current working directory for creating the archive.\nDefaults to "),t("code",[e._v("process.cwd()")]),e._v(".  [Alias: "),t("code",[e._v("C")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("prefix")]),e._v(" A path portion to prefix onto the entries in the archive.")]),e._v(" "),t("li",[t("code",[e._v("gzip")]),e._v(" Set to any truthy value to create a gzipped archive, or an\nobject with settings for "),t("code",[e._v("zlib.Gzip()")]),e._v(" [Alias: "),t("code",[e._v("z")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v(" A function that gets called with "),t("code",[e._v("(path, stat)")]),e._v(" for each\nentry being added.  Return "),t("code",[e._v("true")]),e._v(" to add the entry to the archive,\nor "),t("code",[e._v("false")]),e._v(" to omit it.")]),e._v(" "),t("li",[t("code",[e._v("portable")]),e._v(" Omit metadata that is system-specific: "),t("code",[e._v("ctime")]),e._v(", "),t("code",[e._v("atime")]),e._v(",\n"),t("code",[e._v("uid")]),e._v(", "),t("code",[e._v("gid")]),e._v(", "),t("code",[e._v("uname")]),e._v(", "),t("code",[e._v("gname")]),e._v(", "),t("code",[e._v("dev")]),e._v(", "),t("code",[e._v("ino")]),e._v(", and "),t("code",[e._v("nlink")]),e._v(".  Note\nthat "),t("code",[e._v("mtime")]),e._v(" is still included, because this is necessary for other\ntime-based operations.  Additionally, "),t("code",[e._v("mode")]),e._v(' is set to a "reasonable\ndefault" for most unix systems, based on a '),t("code",[e._v("umask")]),e._v(" value of "),t("code",[e._v("0o22")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("preservePaths")]),e._v(" Allow absolute paths.  By default, "),t("code",[e._v("/")]),e._v(" is stripped\nfrom absolute paths. [Alias: "),t("code",[e._v("P")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("mode")]),e._v(" The mode to set on the created file archive")]),e._v(" "),t("li",[t("code",[e._v("noDirRecurse")]),e._v(" Do not recursively archive the contents of\ndirectories. [Alias: "),t("code",[e._v("n")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("follow")]),e._v(" Set to true to pack the targets of symbolic links.  Without\nthis option, symbolic links are archived as such. [Alias: "),t("code",[e._v("L")]),e._v(", "),t("code",[e._v("h")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("noPax")]),e._v(" Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly.")]),e._v(" "),t("li",[t("code",[e._v("noMtime")]),e._v(" Set to true to omit writing "),t("code",[e._v("mtime")]),e._v(" values for entries.\nNote that this prevents using other mtime-based features like\n"),t("code",[e._v("tar.update")]),e._v(" or the "),t("code",[e._v("keepNewer")]),e._v(" option with the resulting tar archive.\n[Alias: "),t("code",[e._v("m")]),e._v(", "),t("code",[e._v("no-mtime")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("mtime")]),e._v(" Set to a "),t("code",[e._v("Date")]),e._v(" object to force a specific "),t("code",[e._v("mtime")]),e._v(" for\neverything added to the archive.  Overridden by "),t("code",[e._v("noMtime")]),e._v(".")])]),e._v(" "),t("p",[e._v("The following options are mostly internal, but can be modified in some\nadvanced use cases, such as re-using caches between runs.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("linkCache")]),e._v(" A Map object containing the device and inode value for\nany file whose nlink is > 1, to identify hard links.")]),e._v(" "),t("li",[t("code",[e._v("statCache")]),e._v(" A Map object that caches calls "),t("code",[e._v("lstat")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("readdirCache")]),e._v(" A Map object that caches calls to "),t("code",[e._v("readdir")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("jobs")]),e._v(" A number specifying how many concurrent jobs to run.\nDefaults to 4.")]),e._v(" "),t("li",[t("code",[e._v("maxReadSize")]),e._v(" The maximum buffer size for "),t("code",[e._v("fs.read()")]),e._v(" operations.\nDefaults to 16 MB.")])]),e._v(" "),t("h3",{attrs:{id:"tar-x-options-filelist-callback-alias-tar-extract"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-x-options-filelist-callback-alias-tar-extract"}},[e._v("#")]),e._v(" tar.x(options, fileList, callback) [alias: tar.extract]")]),e._v(" "),t("p",[e._v("Extract a tarball archive.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("fileList")]),e._v(" is an array of paths to extract from the tarball.  If\nno paths are provided, then all the entries are extracted.")]),e._v(" "),t("p",[e._v("If the archive is gzipped, then tar will detect this and unzip it.")]),e._v(" "),t("p",[e._v("Note that all directories that are created will be forced to be\nwritable, readable, and listable by their owner, to avoid cases where\na directory prevents extraction of child entries by virtue of its\nmode.")]),e._v(" "),t("p",[e._v("Most extraction errors will cause a "),t("code",[e._v("warn")]),e._v(" event to be emitted.  If\nthe "),t("code",[e._v("cwd")]),e._v(" is missing, or not a directory, then the extraction will\nfail completely.")]),e._v(" "),t("p",[e._v("The following options are supported:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("cwd")]),e._v(" Extract files relative to the specified directory.  Defaults\nto "),t("code",[e._v("process.cwd()")]),e._v(".  If provided, this must exist and must be a\ndirectory. [Alias: "),t("code",[e._v("C")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("file")]),e._v(" The archive file to extract.  If not specified, then a\nWritable stream is returned where the archive data should be\nwritten. [Alias: "),t("code",[e._v("f")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("sync")]),e._v(" Create files and directories synchronously.")]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v(" A function that gets called with "),t("code",[e._v("(path, entry)")]),e._v(" for each\nentry being unpacked.  Return "),t("code",[e._v("true")]),e._v(" to unpack the entry from the\narchive, or "),t("code",[e._v("false")]),e._v(" to skip it.")]),e._v(" "),t("li",[t("code",[e._v("newer")]),e._v(" Set to true to keep the existing file on disk if it's newer\nthan the file in the archive. [Alias: "),t("code",[e._v("keep-newer")]),e._v(",\n"),t("code",[e._v("keep-newer-files")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("keep")]),e._v(" Do not overwrite existing files.  In particular, if a file\nappears more than once in an archive, later copies will not\noverwrite earlier copies. [Alias: "),t("code",[e._v("k")]),e._v(", "),t("code",[e._v("keep-existing")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("preservePaths")]),e._v(" Allow absolute paths, paths containing "),t("code",[e._v("..")]),e._v(", and\nextracting through symbolic links.  By default, "),t("code",[e._v("/")]),e._v(" is stripped from\nabsolute paths, "),t("code",[e._v("..")]),e._v(" paths are not extracted, and any file whose\nlocation would be modified by a symbolic link is not extracted.\n[Alias: "),t("code",[e._v("P")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("unlink")]),e._v(" Unlink files before creating them.  Without this option,\ntar overwrites existing files, which preserves existing hardlinks.\nWith this option, existing hardlinks will be broken, as will any\nsymlink that would affect the location of an extracted file. [Alias:\n"),t("code",[e._v("U")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("strip")]),e._v(" Remove the specified number of leading path elements.\nPathnames with fewer elements will be silently skipped.  Note that\nthe pathname is edited after applying the filter, but before\nsecurity checks. [Alias: "),t("code",[e._v("strip-components")]),e._v(", "),t("code",[e._v("stripComponents")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("preserveOwner")]),e._v(" If true, tar will set the "),t("code",[e._v("uid")]),e._v(" and "),t("code",[e._v("gid")]),e._v(" of\nextracted entries to the "),t("code",[e._v("uid")]),e._v(" and "),t("code",[e._v("gid")]),e._v(" fields in the archive.\nThis defaults to true when run as root, and false otherwise.  If\nfalse, then files and directories will be set with the owner and\ngroup of the user running the process.  This is similar to "),t("code",[e._v("-p")]),e._v(" in\n"),t("code",[e._v("tar(1)")]),e._v(", but ACLs and other system-specific data is never unpacked\nin this implementation, and modes are set by default already.\n[Alias: "),t("code",[e._v("p")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("uid")]),e._v(" Set to a number to force ownership of all extracted files and\nfolders, and all implicitly created directories, to be owned by the\nspecified user id, regardless of the "),t("code",[e._v("uid")]),e._v(" field in the archive.\nCannot be used along with "),t("code",[e._v("preserveOwner")]),e._v(".  Requires also setting a\n"),t("code",[e._v("gid")]),e._v(" option.")]),e._v(" "),t("li",[t("code",[e._v("gid")]),e._v(" Set to a number to force ownership of all extracted files and\nfolders, and all implicitly created directories, to be owned by the\nspecified group id, regardless of the "),t("code",[e._v("gid")]),e._v(" field in the archive.\nCannot be used along with "),t("code",[e._v("preserveOwner")]),e._v(".  Requires also setting a\n"),t("code",[e._v("uid")]),e._v(" option.")]),e._v(" "),t("li",[t("code",[e._v("noMtime")]),e._v(" Set to true to omit writing "),t("code",[e._v("mtime")]),e._v(" value for extracted\nentries. [Alias: "),t("code",[e._v("m")]),e._v(", "),t("code",[e._v("no-mtime")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("transform")]),e._v(" Provide a function that takes an "),t("code",[e._v("entry")]),e._v(" object, and\nreturns a stream, or any falsey value.  If a stream is provided,\nthen that stream's data will be written instead of the contents of\nthe archive entry.  If a falsey value is provided, then the entry is\nwritten to disk as normal.  (To exclude items from extraction, use\nthe "),t("code",[e._v("filter")]),e._v(" option described above.)")]),e._v(" "),t("li",[t("code",[e._v("onentry")]),e._v(" A function that gets called with "),t("code",[e._v("(entry)")]),e._v(" for each entry\nthat passes the filter.")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("noChmod")]),e._v(" Set to true to omit calling "),t("code",[e._v("fs.chmod()")]),e._v(" to ensure that the\nextracted file matches the entry mode.  This also suppresses the call to\n"),t("code",[e._v("process.umask()")]),e._v(" to determine the default umask value, since tar will\nextract with whatever mode is provided, and let the process "),t("code",[e._v("umask")]),e._v(" apply\nnormally.")]),e._v(" "),t("li",[t("code",[e._v("maxDepth")]),e._v(" The maximum depth of subfolders to extract into. This\ndefaults to 1024. Anything deeper than the limit will raise a\nwarning and skip the entry. Set to "),t("code",[e._v("Infinity")]),e._v(" to remove the\nlimitation.")])]),e._v(" "),t("p",[e._v("The following options are mostly internal, but can be modified in some\nadvanced use cases, such as re-using caches between runs.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("maxReadSize")]),e._v(" The maximum buffer size for "),t("code",[e._v("fs.read()")]),e._v(" operations.\nDefaults to 16 MB.")]),e._v(" "),t("li",[t("code",[e._v("umask")]),e._v(" Filter the modes of entries like "),t("code",[e._v("process.umask()")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("dmode")]),e._v(" Default mode for directories")]),e._v(" "),t("li",[t("code",[e._v("fmode")]),e._v(" Default mode for files")]),e._v(" "),t("li",[t("code",[e._v("dirCache")]),e._v(" A Map object of which directories exist.")]),e._v(" "),t("li",[t("code",[e._v("maxMetaEntrySize")]),e._v(" The maximum size of meta entries that is\nsupported.  Defaults to 1 MB.")])]),e._v(" "),t("p",[e._v("Note that using an asynchronous stream type with the "),t("code",[e._v("transform")]),e._v("\noption will cause undefined behavior in sync extractions.\n"),t("a",{attrs:{href:"http://npm.im/minipass",target:"_blank",rel:"noopener noreferrer"}},[e._v("MiniPass"),t("OutboundLink")],1),e._v("-based streams are designed for this\nuse case.")]),e._v(" "),t("h3",{attrs:{id:"tar-t-options-filelist-callback-alias-tar-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-t-options-filelist-callback-alias-tar-list"}},[e._v("#")]),e._v(" tar.t(options, fileList, callback) [alias: tar.list]")]),e._v(" "),t("p",[e._v("List the contents of a tarball archive.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("fileList")]),e._v(" is an array of paths to list from the tarball.  If\nno paths are provided, then all the entries are listed.")]),e._v(" "),t("p",[e._v("If the archive is gzipped, then tar will detect this and unzip it.")]),e._v(" "),t("p",[e._v("If the "),t("code",[e._v("file")]),e._v(" option is "),t("em",[e._v("not")]),e._v(" provided, then returns an event emitter that\nemits "),t("code",[e._v("entry")]),e._v(" events with "),t("code",[e._v("tar.ReadEntry")]),e._v(" objects.  However, they don't\nemit "),t("code",[e._v("'data'")]),e._v(" or "),t("code",[e._v("'end'")]),e._v(" events.  (If you want to get actual readable\nentries, use the "),t("code",[e._v("tar.Parse")]),e._v(" class instead.)")]),e._v(" "),t("p",[e._v("If a "),t("code",[e._v("file")]),e._v(" option "),t("em",[e._v("is")]),e._v(" provided, then the return value will be a promise\nthat resolves when the file has been fully traversed in async mode, or\n"),t("code",[e._v("undefined")]),e._v(" if "),t("code",[e._v("sync: true")]),e._v(" is set.  Thus, you "),t("em",[e._v("must")]),e._v(" specify an "),t("code",[e._v("onentry")]),e._v("\nmethod in order to do anything useful with the data it parses.")]),e._v(" "),t("p",[e._v("The following options are supported:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("file")]),e._v(" The archive file to list.  If not specified, then a\nWritable stream is returned where the archive data should be\nwritten. [Alias: "),t("code",[e._v("f")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("sync")]),e._v(" Read the specified file synchronously.  (This has no effect\nwhen a file option isn't specified, because entries are emitted as\nfast as they are parsed from the stream anyway.)")]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v(" A function that gets called with "),t("code",[e._v("(path, entry)")]),e._v(" for each\nentry being listed.  Return "),t("code",[e._v("true")]),e._v(" to emit the entry from the\narchive, or "),t("code",[e._v("false")]),e._v(" to skip it.")]),e._v(" "),t("li",[t("code",[e._v("onentry")]),e._v(" A function that gets called with "),t("code",[e._v("(entry)")]),e._v(" for each entry\nthat passes the filter.  This is important for when "),t("code",[e._v("file")]),e._v(" is set,\nbecause there is no other way to do anything useful with this method.")]),e._v(" "),t("li",[t("code",[e._v("maxReadSize")]),e._v(" The maximum buffer size for "),t("code",[e._v("fs.read()")]),e._v(" operations.\nDefaults to 16 MB.")]),e._v(" "),t("li",[t("code",[e._v("noResume")]),e._v(" By default, "),t("code",[e._v("entry")]),e._v(" streams are resumed immediately after\nthe call to "),t("code",[e._v("onentry")]),e._v(".  Set "),t("code",[e._v("noResume: true")]),e._v(" to suppress this\nbehavior.  Note that by opting into this, the stream will never\ncomplete until the entry data is consumed.")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')])]),e._v(" "),t("h3",{attrs:{id:"tar-u-options-filelist-callback-alias-tar-update"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-u-options-filelist-callback-alias-tar-update"}},[e._v("#")]),e._v(" tar.u(options, fileList, callback) [alias: tar.update]")]),e._v(" "),t("p",[e._v("Add files to an archive if they are newer than the entry already in\nthe tarball archive.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("fileList")]),e._v(" is an array of paths to add to the tarball.  Adding a\ndirectory also adds its children recursively.")]),e._v(" "),t("p",[e._v("An entry in "),t("code",[e._v("fileList")]),e._v(" that starts with an "),t("code",[e._v("@")]),e._v(" symbol is a tar archive\nwhose entries will be added.  To add a file that starts with "),t("code",[e._v("@")]),e._v(",\nprepend it with "),t("code",[e._v("./")]),e._v(".")]),e._v(" "),t("p",[e._v("The following options are supported:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("file")]),e._v(" Required. Write the tarball archive to the specified\nfilename. [Alias: "),t("code",[e._v("f")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("sync")]),e._v(" Act synchronously.  If this is set, then any provided file\nwill be fully written after the call to "),t("code",[e._v("tar.c")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("cwd")]),e._v(" The current working directory for adding entries to the\narchive.  Defaults to "),t("code",[e._v("process.cwd()")]),e._v(".  [Alias: "),t("code",[e._v("C")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("prefix")]),e._v(" A path portion to prefix onto the entries in the archive.")]),e._v(" "),t("li",[t("code",[e._v("gzip")]),e._v(" Set to any truthy value to create a gzipped archive, or an\nobject with settings for "),t("code",[e._v("zlib.Gzip()")]),e._v(" [Alias: "),t("code",[e._v("z")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v(" A function that gets called with "),t("code",[e._v("(path, stat)")]),e._v(" for each\nentry being added.  Return "),t("code",[e._v("true")]),e._v(" to add the entry to the archive,\nor "),t("code",[e._v("false")]),e._v(" to omit it.")]),e._v(" "),t("li",[t("code",[e._v("portable")]),e._v(" Omit metadata that is system-specific: "),t("code",[e._v("ctime")]),e._v(", "),t("code",[e._v("atime")]),e._v(",\n"),t("code",[e._v("uid")]),e._v(", "),t("code",[e._v("gid")]),e._v(", "),t("code",[e._v("uname")]),e._v(", "),t("code",[e._v("gname")]),e._v(", "),t("code",[e._v("dev")]),e._v(", "),t("code",[e._v("ino")]),e._v(", and "),t("code",[e._v("nlink")]),e._v(".  Note\nthat "),t("code",[e._v("mtime")]),e._v(" is still included, because this is necessary for other\ntime-based operations.  Additionally, "),t("code",[e._v("mode")]),e._v(' is set to a "reasonable\ndefault" for most unix systems, based on a '),t("code",[e._v("umask")]),e._v(" value of "),t("code",[e._v("0o22")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("preservePaths")]),e._v(" Allow absolute paths.  By default, "),t("code",[e._v("/")]),e._v(" is stripped\nfrom absolute paths. [Alias: "),t("code",[e._v("P")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("maxReadSize")]),e._v(" The maximum buffer size for "),t("code",[e._v("fs.read()")]),e._v(" operations.\nDefaults to 16 MB.")]),e._v(" "),t("li",[t("code",[e._v("noDirRecurse")]),e._v(" Do not recursively archive the contents of\ndirectories. [Alias: "),t("code",[e._v("n")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("follow")]),e._v(" Set to true to pack the targets of symbolic links.  Without\nthis option, symbolic links are archived as such. [Alias: "),t("code",[e._v("L")]),e._v(", "),t("code",[e._v("h")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("noPax")]),e._v(" Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly.")]),e._v(" "),t("li",[t("code",[e._v("noMtime")]),e._v(" Set to true to omit writing "),t("code",[e._v("mtime")]),e._v(" values for entries.\nNote that this prevents using other mtime-based features like\n"),t("code",[e._v("tar.update")]),e._v(" or the "),t("code",[e._v("keepNewer")]),e._v(" option with the resulting tar archive.\n[Alias: "),t("code",[e._v("m")]),e._v(", "),t("code",[e._v("no-mtime")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("mtime")]),e._v(" Set to a "),t("code",[e._v("Date")]),e._v(" object to force a specific "),t("code",[e._v("mtime")]),e._v(" for\neverything added to the archive.  Overridden by "),t("code",[e._v("noMtime")]),e._v(".")])]),e._v(" "),t("h3",{attrs:{id:"tar-r-options-filelist-callback-alias-tar-replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-r-options-filelist-callback-alias-tar-replace"}},[e._v("#")]),e._v(" tar.r(options, fileList, callback) [alias: tar.replace]")]),e._v(" "),t("p",[e._v("Add files to an existing archive.  Because later entries override\nearlier entries, this effectively replaces any existing entries.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("fileList")]),e._v(" is an array of paths to add to the tarball.  Adding a\ndirectory also adds its children recursively.")]),e._v(" "),t("p",[e._v("An entry in "),t("code",[e._v("fileList")]),e._v(" that starts with an "),t("code",[e._v("@")]),e._v(" symbol is a tar archive\nwhose entries will be added.  To add a file that starts with "),t("code",[e._v("@")]),e._v(",\nprepend it with "),t("code",[e._v("./")]),e._v(".")]),e._v(" "),t("p",[e._v("The following options are supported:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("file")]),e._v(" Required. Write the tarball archive to the specified\nfilename. [Alias: "),t("code",[e._v("f")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("sync")]),e._v(" Act synchronously.  If this is set, then any provided file\nwill be fully written after the call to "),t("code",[e._v("tar.c")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("cwd")]),e._v(" The current working directory for adding entries to the\narchive.  Defaults to "),t("code",[e._v("process.cwd()")]),e._v(".  [Alias: "),t("code",[e._v("C")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("prefix")]),e._v(" A path portion to prefix onto the entries in the archive.")]),e._v(" "),t("li",[t("code",[e._v("gzip")]),e._v(" Set to any truthy value to create a gzipped archive, or an\nobject with settings for "),t("code",[e._v("zlib.Gzip()")]),e._v(" [Alias: "),t("code",[e._v("z")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v(" A function that gets called with "),t("code",[e._v("(path, stat)")]),e._v(" for each\nentry being added.  Return "),t("code",[e._v("true")]),e._v(" to add the entry to the archive,\nor "),t("code",[e._v("false")]),e._v(" to omit it.")]),e._v(" "),t("li",[t("code",[e._v("portable")]),e._v(" Omit metadata that is system-specific: "),t("code",[e._v("ctime")]),e._v(", "),t("code",[e._v("atime")]),e._v(",\n"),t("code",[e._v("uid")]),e._v(", "),t("code",[e._v("gid")]),e._v(", "),t("code",[e._v("uname")]),e._v(", "),t("code",[e._v("gname")]),e._v(", "),t("code",[e._v("dev")]),e._v(", "),t("code",[e._v("ino")]),e._v(", and "),t("code",[e._v("nlink")]),e._v(".  Note\nthat "),t("code",[e._v("mtime")]),e._v(" is still included, because this is necessary for other\ntime-based operations.  Additionally, "),t("code",[e._v("mode")]),e._v(' is set to a "reasonable\ndefault" for most unix systems, based on a '),t("code",[e._v("umask")]),e._v(" value of "),t("code",[e._v("0o22")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("preservePaths")]),e._v(" Allow absolute paths.  By default, "),t("code",[e._v("/")]),e._v(" is stripped\nfrom absolute paths. [Alias: "),t("code",[e._v("P")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("maxReadSize")]),e._v(" The maximum buffer size for "),t("code",[e._v("fs.read()")]),e._v(" operations.\nDefaults to 16 MB.")]),e._v(" "),t("li",[t("code",[e._v("noDirRecurse")]),e._v(" Do not recursively archive the contents of\ndirectories. [Alias: "),t("code",[e._v("n")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("follow")]),e._v(" Set to true to pack the targets of symbolic links.  Without\nthis option, symbolic links are archived as such. [Alias: "),t("code",[e._v("L")]),e._v(", "),t("code",[e._v("h")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("noPax")]),e._v(" Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly.")]),e._v(" "),t("li",[t("code",[e._v("noMtime")]),e._v(" Set to true to omit writing "),t("code",[e._v("mtime")]),e._v(" values for entries.\nNote that this prevents using other mtime-based features like\n"),t("code",[e._v("tar.update")]),e._v(" or the "),t("code",[e._v("keepNewer")]),e._v(" option with the resulting tar archive.\n[Alias: "),t("code",[e._v("m")]),e._v(", "),t("code",[e._v("no-mtime")]),e._v("]")]),e._v(" "),t("li",[t("code",[e._v("mtime")]),e._v(" Set to a "),t("code",[e._v("Date")]),e._v(" object to force a specific "),t("code",[e._v("mtime")]),e._v(" for\neverything added to the archive.  Overridden by "),t("code",[e._v("noMtime")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"low-level-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#low-level-api"}},[e._v("#")]),e._v(" Low-Level API")]),e._v(" "),t("h3",{attrs:{id:"class-tar-pack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-pack"}},[e._v("#")]),e._v(" class tar.Pack")]),e._v(" "),t("p",[e._v("A readable tar stream.")]),e._v(" "),t("p",[e._v("Has all the standard readable stream interface stuff.  "),t("code",[e._v("'data'")]),e._v(" and\n"),t("code",[e._v("'end'")]),e._v(" events, "),t("code",[e._v("read()")]),e._v(" method, "),t("code",[e._v("pause()")]),e._v(" and "),t("code",[e._v("resume()")]),e._v(", etc.")]),e._v(" "),t("h4",{attrs:{id:"constructor-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-options"}},[e._v("#")]),e._v(" constructor(options)")]),e._v(" "),t("p",[e._v("The following options are supported:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("cwd")]),e._v(" The current working directory for creating the archive.\nDefaults to "),t("code",[e._v("process.cwd()")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("prefix")]),e._v(" A path portion to prefix onto the entries in the archive.")]),e._v(" "),t("li",[t("code",[e._v("gzip")]),e._v(" Set to any truthy value to create a gzipped archive, or an\nobject with settings for "),t("code",[e._v("zlib.Gzip()")])]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v(" A function that gets called with "),t("code",[e._v("(path, stat)")]),e._v(" for each\nentry being added.  Return "),t("code",[e._v("true")]),e._v(" to add the entry to the archive,\nor "),t("code",[e._v("false")]),e._v(" to omit it.")]),e._v(" "),t("li",[t("code",[e._v("portable")]),e._v(" Omit metadata that is system-specific: "),t("code",[e._v("ctime")]),e._v(", "),t("code",[e._v("atime")]),e._v(",\n"),t("code",[e._v("uid")]),e._v(", "),t("code",[e._v("gid")]),e._v(", "),t("code",[e._v("uname")]),e._v(", "),t("code",[e._v("gname")]),e._v(", "),t("code",[e._v("dev")]),e._v(", "),t("code",[e._v("ino")]),e._v(", and "),t("code",[e._v("nlink")]),e._v(".  Note\nthat "),t("code",[e._v("mtime")]),e._v(" is still included, because this is necessary for other\ntime-based operations.  Additionally, "),t("code",[e._v("mode")]),e._v(' is set to a "reasonable\ndefault" for most unix systems, based on a '),t("code",[e._v("umask")]),e._v(" value of "),t("code",[e._v("0o22")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("preservePaths")]),e._v(" Allow absolute paths.  By default, "),t("code",[e._v("/")]),e._v(" is stripped\nfrom absolute paths.")]),e._v(" "),t("li",[t("code",[e._v("linkCache")]),e._v(" A Map object containing the device and inode value for\nany file whose nlink is > 1, to identify hard links.")]),e._v(" "),t("li",[t("code",[e._v("statCache")]),e._v(" A Map object that caches calls "),t("code",[e._v("lstat")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("readdirCache")]),e._v(" A Map object that caches calls to "),t("code",[e._v("readdir")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("jobs")]),e._v(" A number specifying how many concurrent jobs to run.\nDefaults to 4.")]),e._v(" "),t("li",[t("code",[e._v("maxReadSize")]),e._v(" The maximum buffer size for "),t("code",[e._v("fs.read()")]),e._v(" operations.\nDefaults to 16 MB.")]),e._v(" "),t("li",[t("code",[e._v("noDirRecurse")]),e._v(" Do not recursively archive the contents of\ndirectories.")]),e._v(" "),t("li",[t("code",[e._v("follow")]),e._v(" Set to true to pack the targets of symbolic links.  Without\nthis option, symbolic links are archived as such.")]),e._v(" "),t("li",[t("code",[e._v("noPax")]),e._v(" Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly.")]),e._v(" "),t("li",[t("code",[e._v("noMtime")]),e._v(" Set to true to omit writing "),t("code",[e._v("mtime")]),e._v(" values for entries.\nNote that this prevents using other mtime-based features like\n"),t("code",[e._v("tar.update")]),e._v(" or the "),t("code",[e._v("keepNewer")]),e._v(" option with the resulting tar archive.")]),e._v(" "),t("li",[t("code",[e._v("mtime")]),e._v(" Set to a "),t("code",[e._v("Date")]),e._v(" object to force a specific "),t("code",[e._v("mtime")]),e._v(" for\neverything added to the archive.  Overridden by "),t("code",[e._v("noMtime")]),e._v(".")])]),e._v(" "),t("h4",{attrs:{id:"add-path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-path"}},[e._v("#")]),e._v(" add(path)")]),e._v(" "),t("p",[e._v("Adds an entry to the archive.  Returns the Pack stream.")]),e._v(" "),t("h4",{attrs:{id:"write-path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#write-path"}},[e._v("#")]),e._v(" write(path)")]),e._v(" "),t("p",[e._v("Adds an entry to the archive.  Returns true if flushed.")]),e._v(" "),t("h4",{attrs:{id:"end"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#end"}},[e._v("#")]),e._v(" end()")]),e._v(" "),t("p",[e._v("Finishes the archive.")]),e._v(" "),t("h3",{attrs:{id:"class-tar-pack-sync"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-pack-sync"}},[e._v("#")]),e._v(" class tar.Pack.Sync")]),e._v(" "),t("p",[e._v("Synchronous version of "),t("code",[e._v("tar.Pack")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"class-tar-unpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-unpack"}},[e._v("#")]),e._v(" class tar.Unpack")]),e._v(" "),t("p",[e._v("A writable stream that unpacks a tar archive onto the file system.")]),e._v(" "),t("p",[e._v("All the normal writable stream stuff is supported.  "),t("code",[e._v("write()")]),e._v(" and\n"),t("code",[e._v("end()")]),e._v(" methods, "),t("code",[e._v("'drain'")]),e._v(" events, etc.")]),e._v(" "),t("p",[e._v("Note that all directories that are created will be forced to be\nwritable, readable, and listable by their owner, to avoid cases where\na directory prevents extraction of child entries by virtue of its\nmode.")]),e._v(" "),t("p",[t("code",[e._v("'close'")]),e._v(" is emitted when it's done writing stuff to the file system.")]),e._v(" "),t("p",[e._v("Most unpack errors will cause a "),t("code",[e._v("warn")]),e._v(" event to be emitted.  If the\n"),t("code",[e._v("cwd")]),e._v(" is missing, or not a directory, then an error will be emitted.")]),e._v(" "),t("h4",{attrs:{id:"constructor-options-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-options-2"}},[e._v("#")]),e._v(" constructor(options)")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("cwd")]),e._v(" Extract files relative to the specified directory.  Defaults\nto "),t("code",[e._v("process.cwd()")]),e._v(".  If provided, this must exist and must be a\ndirectory.")]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v(" A function that gets called with "),t("code",[e._v("(path, entry)")]),e._v(" for each\nentry being unpacked.  Return "),t("code",[e._v("true")]),e._v(" to unpack the entry from the\narchive, or "),t("code",[e._v("false")]),e._v(" to skip it.")]),e._v(" "),t("li",[t("code",[e._v("newer")]),e._v(" Set to true to keep the existing file on disk if it's newer\nthan the file in the archive.")]),e._v(" "),t("li",[t("code",[e._v("keep")]),e._v(" Do not overwrite existing files.  In particular, if a file\nappears more than once in an archive, later copies will not\noverwrite earlier copies.")]),e._v(" "),t("li",[t("code",[e._v("preservePaths")]),e._v(" Allow absolute paths, paths containing "),t("code",[e._v("..")]),e._v(", and\nextracting through symbolic links.  By default, "),t("code",[e._v("/")]),e._v(" is stripped from\nabsolute paths, "),t("code",[e._v("..")]),e._v(" paths are not extracted, and any file whose\nlocation would be modified by a symbolic link is not extracted.")]),e._v(" "),t("li",[t("code",[e._v("unlink")]),e._v(" Unlink files before creating them.  Without this option,\ntar overwrites existing files, which preserves existing hardlinks.\nWith this option, existing hardlinks will be broken, as will any\nsymlink that would affect the location of an extracted file.")]),e._v(" "),t("li",[t("code",[e._v("strip")]),e._v(" Remove the specified number of leading path elements.\nPathnames with fewer elements will be silently skipped.  Note that\nthe pathname is edited after applying the filter, but before\nsecurity checks.")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("umask")]),e._v(" Filter the modes of entries like "),t("code",[e._v("process.umask()")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("dmode")]),e._v(" Default mode for directories")]),e._v(" "),t("li",[t("code",[e._v("fmode")]),e._v(" Default mode for files")]),e._v(" "),t("li",[t("code",[e._v("dirCache")]),e._v(" A Map object of which directories exist.")]),e._v(" "),t("li",[t("code",[e._v("maxMetaEntrySize")]),e._v(" The maximum size of meta entries that is\nsupported.  Defaults to 1 MB.")]),e._v(" "),t("li",[t("code",[e._v("preserveOwner")]),e._v(" If true, tar will set the "),t("code",[e._v("uid")]),e._v(" and "),t("code",[e._v("gid")]),e._v(" of\nextracted entries to the "),t("code",[e._v("uid")]),e._v(" and "),t("code",[e._v("gid")]),e._v(" fields in the archive.\nThis defaults to true when run as root, and false otherwise.  If\nfalse, then files and directories will be set with the owner and\ngroup of the user running the process.  This is similar to "),t("code",[e._v("-p")]),e._v(" in\n"),t("code",[e._v("tar(1)")]),e._v(", but ACLs and other system-specific data is never unpacked\nin this implementation, and modes are set by default already.")]),e._v(" "),t("li",[t("code",[e._v("win32")]),e._v(" True if on a windows platform.  Causes behavior where\nfilenames containing "),t("code",[e._v("<|>?")]),e._v(" chars are converted to\nwindows-compatible values while being unpacked.")]),e._v(" "),t("li",[t("code",[e._v("uid")]),e._v(" Set to a number to force ownership of all extracted files and\nfolders, and all implicitly created directories, to be owned by the\nspecified user id, regardless of the "),t("code",[e._v("uid")]),e._v(" field in the archive.\nCannot be used along with "),t("code",[e._v("preserveOwner")]),e._v(".  Requires also setting a\n"),t("code",[e._v("gid")]),e._v(" option.")]),e._v(" "),t("li",[t("code",[e._v("gid")]),e._v(" Set to a number to force ownership of all extracted files and\nfolders, and all implicitly created directories, to be owned by the\nspecified group id, regardless of the "),t("code",[e._v("gid")]),e._v(" field in the archive.\nCannot be used along with "),t("code",[e._v("preserveOwner")]),e._v(".  Requires also setting a\n"),t("code",[e._v("uid")]),e._v(" option.")]),e._v(" "),t("li",[t("code",[e._v("noMtime")]),e._v(" Set to true to omit writing "),t("code",[e._v("mtime")]),e._v(" value for extracted\nentries.")]),e._v(" "),t("li",[t("code",[e._v("transform")]),e._v(" Provide a function that takes an "),t("code",[e._v("entry")]),e._v(" object, and\nreturns a stream, or any falsey value.  If a stream is provided,\nthen that stream's data will be written instead of the contents of\nthe archive entry.  If a falsey value is provided, then the entry is\nwritten to disk as normal.  (To exclude items from extraction, use\nthe "),t("code",[e._v("filter")]),e._v(" option described above.)")]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("onentry")]),e._v(" A function that gets called with "),t("code",[e._v("(entry)")]),e._v(" for each entry\nthat passes the filter.")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("noChmod")]),e._v(" Set to true to omit calling "),t("code",[e._v("fs.chmod()")]),e._v(" to ensure that the\nextracted file matches the entry mode.  This also suppresses the call to\n"),t("code",[e._v("process.umask()")]),e._v(" to determine the default umask value, since tar will\nextract with whatever mode is provided, and let the process "),t("code",[e._v("umask")]),e._v(" apply\nnormally.")]),e._v(" "),t("li",[t("code",[e._v("maxDepth")]),e._v(" The maximum depth of subfolders to extract into. This\ndefaults to 1024. Anything deeper than the limit will raise a\nwarning and skip the entry. Set to "),t("code",[e._v("Infinity")]),e._v(" to remove the\nlimitation.")])]),e._v(" "),t("h3",{attrs:{id:"class-tar-unpack-sync"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-unpack-sync"}},[e._v("#")]),e._v(" class tar.Unpack.Sync")]),e._v(" "),t("p",[e._v("Synchronous version of "),t("code",[e._v("tar.Unpack")]),e._v(".")]),e._v(" "),t("p",[e._v("Note that using an asynchronous stream type with the "),t("code",[e._v("transform")]),e._v("\noption will cause undefined behavior in sync unpack streams.\n"),t("a",{attrs:{href:"http://npm.im/minipass",target:"_blank",rel:"noopener noreferrer"}},[e._v("MiniPass"),t("OutboundLink")],1),e._v("-based streams are designed for this\nuse case.")]),e._v(" "),t("h3",{attrs:{id:"class-tar-parse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-parse"}},[e._v("#")]),e._v(" class tar.Parse")]),e._v(" "),t("p",[e._v("A writable stream that parses a tar archive stream.  All the standard\nwritable stream stuff is supported.")]),e._v(" "),t("p",[e._v("If the archive is gzipped, then tar will detect this and unzip it.")]),e._v(" "),t("p",[e._v("Emits "),t("code",[e._v("'entry'")]),e._v(" events with "),t("code",[e._v("tar.ReadEntry")]),e._v(" objects, which are\nthemselves readable streams that you can pipe wherever.")]),e._v(" "),t("p",[e._v("Each "),t("code",[e._v("entry")]),e._v(" will not emit until the one before it is flushed through,\nso make sure to either consume the data (with "),t("code",[e._v("on('data', ...)")]),e._v(" or\n"),t("code",[e._v(".pipe(...)")]),e._v(") or throw it away with "),t("code",[e._v(".resume()")]),e._v(" to keep the stream\nflowing.")]),e._v(" "),t("h4",{attrs:{id:"constructor-options-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-options-3"}},[e._v("#")]),e._v(" constructor(options)")]),e._v(" "),t("p",[e._v("Returns an event emitter that emits "),t("code",[e._v("entry")]),e._v(" events with\n"),t("code",[e._v("tar.ReadEntry")]),e._v(" objects.")]),e._v(" "),t("p",[e._v("The following options are supported:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v(" A function that gets called with "),t("code",[e._v("(path, entry)")]),e._v(" for each\nentry being listed.  Return "),t("code",[e._v("true")]),e._v(" to emit the entry from the\narchive, or "),t("code",[e._v("false")]),e._v(" to skip it.")]),e._v(" "),t("li",[t("code",[e._v("onentry")]),e._v(" A function that gets called with "),t("code",[e._v("(entry)")]),e._v(" for each entry\nthat passes the filter.")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')])]),e._v(" "),t("h4",{attrs:{id:"abort-error"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#abort-error"}},[e._v("#")]),e._v(" abort(error)")]),e._v(" "),t("p",[e._v("Stop all parsing activities.  This is called when there are zlib\nerrors.  It also emits an unrecoverable warning with the error provided.")]),e._v(" "),t("h3",{attrs:{id:"class-tar-readentry-extends-minipass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-readentry-extends-minipass"}},[e._v("#")]),e._v(" class tar.ReadEntry extends "),t("a",{attrs:{href:"http://npm.im/minipass",target:"_blank",rel:"noopener noreferrer"}},[e._v("MiniPass"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("A representation of an entry that is being read out of a tar archive.")]),e._v(" "),t("p",[e._v("It has the following fields:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("extended")]),e._v(" The extended metadata object provided to the constructor.")]),e._v(" "),t("li",[t("code",[e._v("globalExtended")]),e._v(" The global extended metadata object provided to the\nconstructor.")]),e._v(" "),t("li",[t("code",[e._v("remain")]),e._v(" The number of bytes remaining to be written into the\nstream.")]),e._v(" "),t("li",[t("code",[e._v("blockRemain")]),e._v(" The number of 512-byte blocks remaining to be written\ninto the stream.")]),e._v(" "),t("li",[t("code",[e._v("ignore")]),e._v(" Whether this entry should be ignored.")]),e._v(" "),t("li",[t("code",[e._v("meta")]),e._v(" True if this represents metadata about the next entry, false\nif it represents a filesystem object.")]),e._v(" "),t("li",[e._v("All the fields from the header, extended header, and global extended\nheader are added to the ReadEntry object.  So it has "),t("code",[e._v("path")]),e._v(", "),t("code",[e._v("type")]),e._v(",\n"),t("code",[e._v("size")]),e._v(", "),t("code",[e._v("mode")]),e._v(", and so on.")])]),e._v(" "),t("h4",{attrs:{id:"constructor-header-extended-globalextended"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-header-extended-globalextended"}},[e._v("#")]),e._v(" constructor(header, extended, globalExtended)")]),e._v(" "),t("p",[e._v("Create a new ReadEntry object with the specified header, extended\nheader, and global extended header values.")]),e._v(" "),t("h3",{attrs:{id:"class-tar-writeentry-extends-minipass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-writeentry-extends-minipass"}},[e._v("#")]),e._v(" class tar.WriteEntry extends "),t("a",{attrs:{href:"http://npm.im/minipass",target:"_blank",rel:"noopener noreferrer"}},[e._v("MiniPass"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("A representation of an entry that is being written from the file\nsystem into a tar archive.")]),e._v(" "),t("p",[e._v("Emits data for the Header, and for the Pax Extended Header if one is\nrequired, as well as any body data.")]),e._v(" "),t("p",[e._v("Creating a WriteEntry for a directory does not also create\nWriteEntry objects for all of the directory contents.")]),e._v(" "),t("p",[e._v("It has the following fields:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("path")]),e._v(" The path field that will be written to the archive.  By\ndefault, this is also the path from the cwd to the file system\nobject.")]),e._v(" "),t("li",[t("code",[e._v("portable")]),e._v(" Omit metadata that is system-specific: "),t("code",[e._v("ctime")]),e._v(", "),t("code",[e._v("atime")]),e._v(",\n"),t("code",[e._v("uid")]),e._v(", "),t("code",[e._v("gid")]),e._v(", "),t("code",[e._v("uname")]),e._v(", "),t("code",[e._v("gname")]),e._v(", "),t("code",[e._v("dev")]),e._v(", "),t("code",[e._v("ino")]),e._v(", and "),t("code",[e._v("nlink")]),e._v(".  Note\nthat "),t("code",[e._v("mtime")]),e._v(" is still included, because this is necessary for other\ntime-based operations.  Additionally, "),t("code",[e._v("mode")]),e._v(' is set to a "reasonable\ndefault" for most unix systems, based on a '),t("code",[e._v("umask")]),e._v(" value of "),t("code",[e._v("0o22")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("myuid")]),e._v(" If supported, the uid of the user running the current\nprocess.")]),e._v(" "),t("li",[t("code",[e._v("myuser")]),e._v(" The "),t("code",[e._v("env.USER")]),e._v(" string if set, or "),t("code",[e._v("''")]),e._v(".  Set as the entry\n"),t("code",[e._v("uname")]),e._v(" field if the file's "),t("code",[e._v("uid")]),e._v(" matches "),t("code",[e._v("this.myuid")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("maxReadSize")]),e._v(" The maximum buffer size for "),t("code",[e._v("fs.read()")]),e._v(" operations.\nDefaults to 1 MB.")]),e._v(" "),t("li",[t("code",[e._v("linkCache")]),e._v(" A Map object containing the device and inode value for\nany file whose nlink is > 1, to identify hard links.")]),e._v(" "),t("li",[t("code",[e._v("statCache")]),e._v(" A Map object that caches calls "),t("code",[e._v("lstat")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("preservePaths")]),e._v(" Allow absolute paths.  By default, "),t("code",[e._v("/")]),e._v(" is stripped\nfrom absolute paths.")]),e._v(" "),t("li",[t("code",[e._v("cwd")]),e._v(" The current working directory for creating the archive.\nDefaults to "),t("code",[e._v("process.cwd()")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("absolute")]),e._v(" The absolute path to the entry on the filesystem.  By\ndefault, this is "),t("code",[e._v("path.resolve(this.cwd, this.path)")]),e._v(", but it can be\noverridden explicitly.")]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("win32")]),e._v(" True if on a windows platform.  Causes behavior where paths\nreplace "),t("code",[e._v("\\")]),e._v(" with "),t("code",[e._v("/")]),e._v(" and filenames containing the windows-compatible\nforms of "),t("code",[e._v("<|>?:")]),e._v(" characters are converted to actual "),t("code",[e._v("<|>?:")]),e._v(" characters\nin the archive.")]),e._v(" "),t("li",[t("code",[e._v("noPax")]),e._v(" Suppress pax extended headers.  Note that this means that\nlong paths and linkpaths will be truncated, and large or negative\nnumeric values may be interpreted incorrectly.")]),e._v(" "),t("li",[t("code",[e._v("noMtime")]),e._v(" Set to true to omit writing "),t("code",[e._v("mtime")]),e._v(" values for entries.\nNote that this prevents using other mtime-based features like\n"),t("code",[e._v("tar.update")]),e._v(" or the "),t("code",[e._v("keepNewer")]),e._v(" option with the resulting tar archive.")])]),e._v(" "),t("h4",{attrs:{id:"constructor-path-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-path-options"}},[e._v("#")]),e._v(" constructor(path, options)")]),e._v(" "),t("p",[t("code",[e._v("path")]),e._v(" is the path of the entry as it is written in the archive.")]),e._v(" "),t("p",[e._v("The following options are supported:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("portable")]),e._v(" Omit metadata that is system-specific: "),t("code",[e._v("ctime")]),e._v(", "),t("code",[e._v("atime")]),e._v(",\n"),t("code",[e._v("uid")]),e._v(", "),t("code",[e._v("gid")]),e._v(", "),t("code",[e._v("uname")]),e._v(", "),t("code",[e._v("gname")]),e._v(", "),t("code",[e._v("dev")]),e._v(", "),t("code",[e._v("ino")]),e._v(", and "),t("code",[e._v("nlink")]),e._v(".  Note\nthat "),t("code",[e._v("mtime")]),e._v(" is still included, because this is necessary for other\ntime-based operations.  Additionally, "),t("code",[e._v("mode")]),e._v(' is set to a "reasonable\ndefault" for most unix systems, based on a '),t("code",[e._v("umask")]),e._v(" value of "),t("code",[e._v("0o22")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("maxReadSize")]),e._v(" The maximum buffer size for "),t("code",[e._v("fs.read()")]),e._v(" operations.\nDefaults to 1 MB.")]),e._v(" "),t("li",[t("code",[e._v("linkCache")]),e._v(" A Map object containing the device and inode value for\nany file whose nlink is > 1, to identify hard links.")]),e._v(" "),t("li",[t("code",[e._v("statCache")]),e._v(" A Map object that caches calls "),t("code",[e._v("lstat")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("preservePaths")]),e._v(" Allow absolute paths.  By default, "),t("code",[e._v("/")]),e._v(" is stripped\nfrom absolute paths.")]),e._v(" "),t("li",[t("code",[e._v("cwd")]),e._v(" The current working directory for creating the archive.\nDefaults to "),t("code",[e._v("process.cwd()")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("absolute")]),e._v(" The absolute path to the entry on the filesystem.  By\ndefault, this is "),t("code",[e._v("path.resolve(this.cwd, this.path)")]),e._v(", but it can be\noverridden explicitly.")]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("win32")]),e._v(" True if on a windows platform.  Causes behavior where paths\nreplace "),t("code",[e._v("\\")]),e._v(" with "),t("code",[e._v("/")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("noMtime")]),e._v(" Set to true to omit writing "),t("code",[e._v("mtime")]),e._v(" values for entries.\nNote that this prevents using other mtime-based features like\n"),t("code",[e._v("tar.update")]),e._v(" or the "),t("code",[e._v("keepNewer")]),e._v(" option with the resulting tar archive.")]),e._v(" "),t("li",[t("code",[e._v("umask")]),e._v(" Set to restrict the modes on the entries in the archive,\nsomewhat like how umask works on file creation.  Defaults to\n"),t("code",[e._v("process.umask()")]),e._v(" on unix systems, or "),t("code",[e._v("0o22")]),e._v(" on Windows.")])]),e._v(" "),t("h4",{attrs:{id:"warn-message-data"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#warn-message-data"}},[e._v("#")]),e._v(" warn(message, data)")]),e._v(" "),t("p",[e._v("If strict, emit an error with the provided message.")]),e._v(" "),t("p",[e._v("Othewise, emit a "),t("code",[e._v("'warn'")]),e._v(" event with the provided message and data.")]),e._v(" "),t("h3",{attrs:{id:"class-tar-writeentry-sync"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-writeentry-sync"}},[e._v("#")]),e._v(" class tar.WriteEntry.Sync")]),e._v(" "),t("p",[e._v("Synchronous version of tar.WriteEntry")]),e._v(" "),t("h3",{attrs:{id:"class-tar-writeentry-tar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-writeentry-tar"}},[e._v("#")]),e._v(" class tar.WriteEntry.Tar")]),e._v(" "),t("p",[e._v("A version of tar.WriteEntry that gets its data from a tar.ReadEntry\ninstead of from the filesystem.")]),e._v(" "),t("h4",{attrs:{id:"constructor-readentry-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-readentry-options"}},[e._v("#")]),e._v(" constructor(readEntry, options)")]),e._v(" "),t("p",[t("code",[e._v("readEntry")]),e._v(" is the entry being read out of another archive.")]),e._v(" "),t("p",[e._v("The following options are supported:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("portable")]),e._v(" Omit metadata that is system-specific: "),t("code",[e._v("ctime")]),e._v(", "),t("code",[e._v("atime")]),e._v(",\n"),t("code",[e._v("uid")]),e._v(", "),t("code",[e._v("gid")]),e._v(", "),t("code",[e._v("uname")]),e._v(", "),t("code",[e._v("gname")]),e._v(", "),t("code",[e._v("dev")]),e._v(", "),t("code",[e._v("ino")]),e._v(", and "),t("code",[e._v("nlink")]),e._v(".  Note\nthat "),t("code",[e._v("mtime")]),e._v(" is still included, because this is necessary for other\ntime-based operations.  Additionally, "),t("code",[e._v("mode")]),e._v(' is set to a "reasonable\ndefault" for most unix systems, based on a '),t("code",[e._v("umask")]),e._v(" value of "),t("code",[e._v("0o22")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("preservePaths")]),e._v(" Allow absolute paths.  By default, "),t("code",[e._v("/")]),e._v(" is stripped\nfrom absolute paths.")]),e._v(" "),t("li",[t("code",[e._v("strict")]),e._v(" Treat warnings as crash-worthy errors.  Default false.")]),e._v(" "),t("li",[t("code",[e._v("onwarn")]),e._v(" A function that will get called with "),t("code",[e._v("(code, message, data)")]),e._v(' for\nany warnings encountered.  (See "Warnings and Errors")')]),e._v(" "),t("li",[t("code",[e._v("noMtime")]),e._v(" Set to true to omit writing "),t("code",[e._v("mtime")]),e._v(" values for entries.\nNote that this prevents using other mtime-based features like\n"),t("code",[e._v("tar.update")]),e._v(" or the "),t("code",[e._v("keepNewer")]),e._v(" option with the resulting tar archive.")])]),e._v(" "),t("h3",{attrs:{id:"class-tar-header"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-header"}},[e._v("#")]),e._v(" class tar.Header")]),e._v(" "),t("p",[e._v("A class for reading and writing header blocks.")]),e._v(" "),t("p",[e._v("It has the following fields:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("nullBlock")]),e._v(" True if decoding a block which is entirely composed of\n"),t("code",[e._v("0x00")]),e._v(" null bytes.  (Useful because tar files are terminated by\nat least 2 null blocks.)")]),e._v(" "),t("li",[t("code",[e._v("cksumValid")]),e._v(" True if the checksum in the header is valid, false\notherwise.")]),e._v(" "),t("li",[t("code",[e._v("needPax")]),e._v(" True if the values, as encoded, will require a Pax\nextended header.")]),e._v(" "),t("li",[t("code",[e._v("path")]),e._v(" The path of the entry.")]),e._v(" "),t("li",[t("code",[e._v("mode")]),e._v(" The 4 lowest-order octal digits of the file mode.  That is,\nread/write/execute permissions for world, group, and owner, and the\nsetuid, setgid, and sticky bits.")]),e._v(" "),t("li",[t("code",[e._v("uid")]),e._v(" Numeric user id of the file owner")]),e._v(" "),t("li",[t("code",[e._v("gid")]),e._v(" Numeric group id of the file owner")]),e._v(" "),t("li",[t("code",[e._v("size")]),e._v(" Size of the file in bytes")]),e._v(" "),t("li",[t("code",[e._v("mtime")]),e._v(" Modified time of the file")]),e._v(" "),t("li",[t("code",[e._v("cksum")]),e._v(" The checksum of the header.  This is generated by adding all\nthe bytes of the header block, treating the checksum field itself as\nall ascii space characters (that is, "),t("code",[e._v("0x20")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("type")]),e._v(" The human-readable name of the type of entry this represents,\nor the alphanumeric key if unknown.")]),e._v(" "),t("li",[t("code",[e._v("typeKey")]),e._v(" The alphanumeric key for the type of entry this header\nrepresents.")]),e._v(" "),t("li",[t("code",[e._v("linkpath")]),e._v(" The target of Link and SymbolicLink entries.")]),e._v(" "),t("li",[t("code",[e._v("uname")]),e._v(" Human-readable user name of the file owner")]),e._v(" "),t("li",[t("code",[e._v("gname")]),e._v(" Human-readable group name of the file owner")]),e._v(" "),t("li",[t("code",[e._v("devmaj")]),e._v(" The major portion of the device number.  Always "),t("code",[e._v("0")]),e._v(" for\nfiles, directories, and links.")]),e._v(" "),t("li",[t("code",[e._v("devmin")]),e._v(" The minor portion of the device number.  Always "),t("code",[e._v("0")]),e._v(" for\nfiles, directories, and links.")]),e._v(" "),t("li",[t("code",[e._v("atime")]),e._v(" File access time.")]),e._v(" "),t("li",[t("code",[e._v("ctime")]),e._v(" File change time.")])]),e._v(" "),t("h4",{attrs:{id:"constructor-data-offset-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-data-offset-0"}},[e._v("#")]),e._v(" constructor(data, [offset=0])")]),e._v(" "),t("p",[t("code",[e._v("data")]),e._v(" is optional.  It is either a Buffer that should be interpreted\nas a tar Header starting at the specified offset and continuing for\n512 bytes, or a data object of keys and values to set on the header\nobject, and eventually encode as a tar Header.")]),e._v(" "),t("h4",{attrs:{id:"decode-block-offset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decode-block-offset"}},[e._v("#")]),e._v(" decode(block, offset)")]),e._v(" "),t("p",[e._v("Decode the provided buffer starting at the specified offset.")]),e._v(" "),t("p",[e._v("Buffer length must be greater than 512 bytes.")]),e._v(" "),t("h4",{attrs:{id:"set-data"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-data"}},[e._v("#")]),e._v(" set(data)")]),e._v(" "),t("p",[e._v("Set the fields in the data object.")]),e._v(" "),t("h4",{attrs:{id:"encode-buffer-offset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encode-buffer-offset"}},[e._v("#")]),e._v(" encode(buffer, offset)")]),e._v(" "),t("p",[e._v("Encode the header fields into the buffer at the specified offset.")]),e._v(" "),t("p",[e._v("Returns "),t("code",[e._v("this.needPax")]),e._v(" to indicate whether a Pax Extended Header is\nrequired to properly encode the specified data.")]),e._v(" "),t("h3",{attrs:{id:"class-tar-pax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-tar-pax"}},[e._v("#")]),e._v(" class tar.Pax")]),e._v(" "),t("p",[e._v("An object representing a set of key-value pairs in an Pax extended\nheader entry.")]),e._v(" "),t("p",[e._v("It has the following fields.  Where the same name is used, they have\nthe same semantics as the tar.Header field of the same name.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("global")]),e._v(" True if this represents a global extended header, or false\nif it is for a single entry.")]),e._v(" "),t("li",[t("code",[e._v("atime")])]),e._v(" "),t("li",[t("code",[e._v("charset")])]),e._v(" "),t("li",[t("code",[e._v("comment")])]),e._v(" "),t("li",[t("code",[e._v("ctime")])]),e._v(" "),t("li",[t("code",[e._v("gid")])]),e._v(" "),t("li",[t("code",[e._v("gname")])]),e._v(" "),t("li",[t("code",[e._v("linkpath")])]),e._v(" "),t("li",[t("code",[e._v("mtime")])]),e._v(" "),t("li",[t("code",[e._v("path")])]),e._v(" "),t("li",[t("code",[e._v("size")])]),e._v(" "),t("li",[t("code",[e._v("uid")])]),e._v(" "),t("li",[t("code",[e._v("uname")])]),e._v(" "),t("li",[t("code",[e._v("dev")])]),e._v(" "),t("li",[t("code",[e._v("ino")])]),e._v(" "),t("li",[t("code",[e._v("nlink")])])]),e._v(" "),t("h4",{attrs:{id:"constructor-object-global"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-object-global"}},[e._v("#")]),e._v(" constructor(object, global)")]),e._v(" "),t("p",[e._v("Set the fields set in the object.  "),t("code",[e._v("global")]),e._v(" is a boolean that defaults\nto false.")]),e._v(" "),t("h4",{attrs:{id:"encode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encode"}},[e._v("#")]),e._v(" encode()")]),e._v(" "),t("p",[e._v("Return a Buffer containing the header and body for the Pax extended\nheader entry, or "),t("code",[e._v("null")]),e._v(" if there is nothing to encode.")]),e._v(" "),t("h4",{attrs:{id:"encodebody"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encodebody"}},[e._v("#")]),e._v(" encodeBody()")]),e._v(" "),t("p",[e._v("Return a string representing the body of the pax extended header\nentry.")]),e._v(" "),t("h4",{attrs:{id:"encodefield-fieldname"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encodefield-fieldname"}},[e._v("#")]),e._v(" encodeField(fieldName)")]),e._v(" "),t("p",[e._v("Return a string representing the key/value encoding for the specified\nfieldName, or "),t("code",[e._v("''")]),e._v(" if the field is unset.")]),e._v(" "),t("h3",{attrs:{id:"tar-pax-parse-string-extended-global"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-pax-parse-string-extended-global"}},[e._v("#")]),e._v(" tar.Pax.parse(string, extended, global)")]),e._v(" "),t("p",[e._v("Return a new Pax object created by parsing the contents of the string\nprovided.")]),e._v(" "),t("p",[e._v("If the "),t("code",[e._v("extended")]),e._v(" object is set, then also add the fields from that\nobject.  (This is necessary because multiple metadata entries can\noccur in sequence.)")]),e._v(" "),t("h3",{attrs:{id:"tar-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-types"}},[e._v("#")]),e._v(" tar.types")]),e._v(" "),t("p",[e._v("A translation table for the "),t("code",[e._v("type")]),e._v(" field in tar headers.")]),e._v(" "),t("h4",{attrs:{id:"tar-types-name-get-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-types-name-get-code"}},[e._v("#")]),e._v(" tar.types.name.get(code)")]),e._v(" "),t("p",[e._v("Get the human-readable name for a given alphanumeric code.")]),e._v(" "),t("h4",{attrs:{id:"tar-types-code-get-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-types-code-get-name"}},[e._v("#")]),e._v(" tar.types.code.get(name)")]),e._v(" "),t("p",[e._v("Get the alphanumeric code for a given human-readable name.")])])}),[],!1,null,null,null);t.default=n.exports}}]);